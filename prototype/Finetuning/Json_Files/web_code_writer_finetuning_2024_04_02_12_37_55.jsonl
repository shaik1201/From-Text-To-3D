{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A rectangular baking mold\nBaking mold Body: An open box\nParameters: body_width=230, body_length=280,  body_height=50\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "\u00ef\u00bb\u00bfimport rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_baking_mold_body(origin, normal, width, length, height):\n    \"\"\"\n    This function creates a 3D model of a baking mold body.\n    The body of the mold is modeled as a hollow box.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the body plane\n        normal (Rhino.Geometry.Vector3d): normal of body plane\n        length (float): the length of the body\n        width (float): the width of the body\n        height (float): the height of the body\n\n    Return:\n        Rhino.Geometry.Brep: 3D model of the baking mold body\n    \"\"\"\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n\n    try:\n        print(\"INFO: create_baking_mold_body - start\", locals())\n        # Create a plane to locate the body\n        body_plane = rg.Plane(origin, normal)\n\n        # Create the base of the body\n        body_base_rectangle = rg.Rectangle3d(body_plane, rg.Interval(- length / 2, length / 2 ), rg.Interval(width / 2, - width / 2)).ToNurbsCurve()\n\n        # Create the top rectangle of the body\n        top_plane = rg.Plane(origin + normal * height, normal)\n        body_top_rectangle = rg.Rectangle3d(top_plane,rg.Interval(- length / 2, length / 2 ), rg.Interval(width / 2, - width / 2)).ToNurbsCurve()\n\n        # Create a .NET list to hold the curves\n        curveList = List[rg.Curve]()\n        curveList.Add(body_base_rectangle)\n        curveList.Add(body_top_rectangle)\n\n        closed = False\n        loft = rg.Brep.CreateFromLoft(curveList, rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        print(\"INFO: create_baking_mold_body - return\", loft)\n        return loft\n\n    except Exception as error:\n        print(\"ERROR: create_baking_mold_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_width = 230\nbody_length = 280\nbody_height = 50\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\nbaking_mold_body = create_baking_mold_body(body_origin, body_normal, body_length, body_width, body_height)\n\n# Return the created object by placing it in variable a\na = baking_mold_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A rectangular baking mold\nBaking mold Base: A flat surface in a rectangular shape at the bottom of the mold.\nParameters: base_width=body_width, base_length=body_length\nOrientation: base_origin=body_origin, base_normal=body_normal"}, {"role": "assistant", "content": "\u00ef\u00bb\u00bfimport rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_baking_mold_base(origin, normal, width, length):\n    \"\"\"\n    This function creates a 3D model of a baking mold base.\n    The base of the mold is modeled as a flat rectangle surface.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the base plane\n        normal (Rhino.Geometry.Vector3d): normal of base plane\n        length (float): the length of the base\n        width (float): the width of the base\n\n    Return:\n        Rhino.Geometry.Brep: 3D model of the baking mold base\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_baking_mold_base - start\", locals())\n        # Create a plane to locate the base\n        base_plane = rg.Plane(origin, normal)\n\n        # Create the bottom of the base\n        base_bottom_rectangle = rg.Rectangle3d(base_plane, rg.Interval(- length / 2, length / 2 ), rg.Interval(width / 2, - width / 2)).ToNurbsCurve()\n        base_surface = rg.Brep.CreatePlanarBreps(base_bottom_rectangle, TOLERANCE)[0]\n\n        print(\"INFO: create_baking_mold_base - return\", base_surface)\n        return base_surface\n\n    except Exception as error:\n        print(\"ERROR: create_baking_mold_base \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_width = 230\nbody_length = 280\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_width = body_width\nbase_length = body_length\nbase_origin = body_origin\nbase_normal = body_normal.ZAxis\n\n# Assembling\nbaking_mold_base = create_baking_mold_base(base_origin, base_normal, base_length, base_width)\n\n# Return the created object by placing it in variable a\na = baking_mold_base"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A rectangular baking mold\nBaking mold Rim: An offset rectangle surface along the top edges of the mold.\nParameters: rim_width_inner=body_width, rim_length_inner=body_length, rim_thickness=10\nOrientation: rim_origin=(0,0,body_height), rim_normal=body_normal"}, {"role": "assistant", "content": "\u00ef\u00bb\u00bfimport rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_baking_mold_rim(origin, normal, length_inner, width_inner, thickness_vertical, thickness_horizontal):\n    \"\"\"\n    This function creates a 3D model of a baking mold. \n    The mold is modeled as an open box with edges.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the molds rim plane\n        normal (Rhino.Geometry.Vector3d): normal of molds rim plane\n        length_inner (float): the length of the inner rectangle of the rim\n        width_inner (float): the width of the inner rectangle of the rim\n        height (float): the height of the molds rim\n        thickness_vertical (float): the length of the outer rectangle of the rim\n        thickness_horizontal (float): : the width of the outer rectangle of the rim\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the baking mold rim\n    \"\"\"\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n\n    try:\n        print(\"INFO: create_baking_mold_rim - start\", locals())\n        if thickness_vertical == 0 and thickness_horizontal == 0: # No rim option\n            return None\n        # Create a plane to locate the rim\n        rim_plane = rg.Plane(origin, normal)\n\n        # Create the inner rectangle of the rim - the top rectangle of the body\n        rim_inner_rectangle = rg.Rectangle3d(rim_plane, rg.Interval(width_inner / 2, - width_inner / 2), rg.Interval(- length_inner / 2, length_inner / 2 )).ToNurbsCurve()\n\n        # Create the rim by adding an outer rectangle - the rim thickness\n        length_outer = length_inner + thickness_vertical\n        width_outer = width_inner + thickness_horizontal\n        rim_outer_rectangle = rg.Rectangle3d(rim_plane, rg.Interval(width_outer / 2, - width_outer / 2), rg.Interval(- length_outer / 2, length_outer / 2 )).ToNurbsCurve()\n\n        # Create a .NET list to hold the curves\n        curveList = List[rg.Curve]()\n        curveList.Add(rim_inner_rectangle)\n        curveList.Add(rim_outer_rectangle)\n\n        closed = False\n        loft = rg.Brep.CreateFromLoft(curveList, rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n\n        print(\"INFO: create_baking_mold_rim - return\", loft)\n        return loft\n\n    except Exception as error:\n        print(\"ERROR: create_baking_mold_rim \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_width = 230\nbody_length = 280\nbody_height = 50\nbody_normal = rg.Vector3d.ZAxis\n\nrim_origin = rg.Point3d(0, 0, body_height)\nrim_normal = body_normal.ZAxis\nrim_length_inner = body_length\nrim_width_inner = body_width\nrim_thickness_vertical = 10\nrim_thickness_horizontal = 10\n\n# Assembling\nbaking_mold_rim = create_baking_mold_rim(rim_origin, rim_normal, rim_length_inner, rim_width_inner, rim_thickness_vertical, rim_thickness_horizontal)\n\n# Return the created object by placing it in variable a\na = baking_mold_rim"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A bottle with a narrow neck\nBottle Body: A cylinder shape that becomes narrow in its neck\nParameters: body_botom_part_height=130, body_bottom_radius=80, body_neck_radius=40, body_neck_height=70\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_bottle_body(origin, normal, bottom_radius, bottom_height, neck_radius, neck_height):\n    \"\"\"\n    This function creates a 3D model of a bottle body.\n    The body is modeled as a cylinder that becomes narrow in its neck.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the bottle body plane\n        normal (Rhino.Geometry.Vector3d): normal of bottle body plane\n        bottom_radius (float): the radius of the bottom of the bottle\n        bottom_height (float): the height of the bottle body\n        neck_radius (float): the radius of the neck of the bottle\n        neck_height (float): the height of the neck of the bottle\n\n    Return:\n        Rhino.Geometry.Brep: 3D model of the bottle body\n    \"\"\"\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n\n    try:\n        print(\"INFO: create_bottle_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the base surface of the bottle\n        bottom_start_circle = rg.Circle(plane, bottom_radius).ToNurbsCurve()\n        bottom_mid_plane = rg.Plane(plane)\n        bottom_mid_plane.Translate(plane.ZAxis * (bottom_height / 2))\n        bottom_mid_circle = rg.Circle(bottom_mid_plane, bottom_radius).ToNurbsCurve()\n        bottom_end_plane = rg.Plane(plane)\n        bottom_end_plane.Translate(plane.ZAxis * (bottom_height * 0.9))\n        bottom_end_circle = rg.Circle(bottom_end_plane, bottom_radius).ToNurbsCurve()\n\n        # Create the neck of the bottle\n        neck_start_plane = rg.Plane(plane)\n        neck_start_plane.Translate(plane.ZAxis * (bottom_height * 1.1))\n        neck_start_circle = rg.Circle(neck_start_plane, neck_radius).ToNurbsCurve()\n        neck_mid_plane = rg.Plane(plane)\n        neck_mid_plane.Translate(plane.ZAxis * (bottom_height + (neck_height / 2)))\n        neck_mid_circle = rg.Circle(neck_mid_plane, neck_radius).ToNurbsCurve()\n        neck_end_plane = rg.Plane(plane)\n        neck_end_plane.Translate(plane.ZAxis * (bottom_height + neck_height))\n        neck_end_circle = rg.Circle(neck_end_plane, neck_radius).ToNurbsCurve()\n\n        # Create a .NET list to hold the curves\n        curveList = List[rg.Curve]()\n        curveList.Add(bottom_start_circle)\n        curveList.Add(bottom_mid_circle)\n        curveList.Add(bottom_end_circle)\n        curveList.Add(neck_start_circle)\n        curveList.Add(neck_mid_circle)\n        curveList.Add(neck_end_circle)\n\n        closed = False\n        bottle = rg.Brep.CreateFromLoft(curveList, rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n\n        print(\"INFO: create_bottle_body - return\", bottle)\n        return bottle\n\n    except Exception as error:\n        print(\"ERROR: create_bottle_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_bottom_radius = 40\nbody_bottom_part_height = 140\nbody_neck_radius = 25\nbody_neck_height = 70\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\nbottle_body = create_bottle_body(body_origin, body_normal, body_bottom_radius, body_bottom_part_height, body_neck_radius, body_neck_height)\n\n# Return created object by placing it in variable a\na = bottle_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A bottle with a narrow neck\nBottle Base: A flat surface in circle shape at the bottom of the bottle.\nParameters: base_radius=body_bottom_radius\nOrientation: base_origin=body_origin, base_normal=body_normal"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_bottle_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a bottle base. \n    The base is modeled as a circle at the base of the bottle.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): the origin of the bottle base plane\n        normal (Rhino.Geometry.Vector3d): the normal of bottle base plane \n        radius (float): the radius of the base\n\n    Return: \n        Rhino.Geometry.Brep: The created 3D model\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_bottle_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base surface\n        base_circle = rg.Circle(plane, radius)\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(), TOLERANCE)[0]\n\n        print(\"INFO: create_bottle_base - return\", base)\n        return base\n\n    except Exception as error:\n        print(\"ERROR: create_bottle_base \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_bottom_radius = 100\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_bottom_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\nbottle_base = create_bottle_base(base_origin, base_normal, base_radius)\n\n# Return created object by placing it in variable a\na = bottle_base"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A bottle with a narrow neck\nBottle lid: A cyllider shape with cap top sitting on the top of the body\nParameters: lid_radius=body_neck_radius, lid_height=15\nOrientation: lid_origin=(0,0,body_botom_part_height+body_neck_height-lid_height), lid_normal=body_normal"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_bottle_lid(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a bottle lid. \n    The lid is modeled as a cylinder with a cap on top.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the bottle lid plane\n        normal (Rhino.Geometry.Vector3d): normal of bottle lid plane \n        radius (float): the radius of the lid\n        height (float): the height of the lid\n\n    Return: \n        Rhino.Geometry.Brep: The created 3D model\n    \"\"\"\n\n    try:\n        print(\"INFO: create_bottle_lid - start\", locals())\n        # Create plane to locate the lid\n        plane = rg.Plane(origin, normal)\n\n        # Create the lid\n        base_circle = rg.Circle(plane, radius)\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = False\n        cap_top = True\n        lid = cylinder.ToBrep(cap_bottom, cap_top)\n\n        print(\"INFO: create_bottle_lid - return\", lid)\n        return lid\n\n    except Exception as error:\n        print(\"ERROR: create_bottle_lid \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_bottom_part_height = 140\nbody_neck_radius = 25\nbody_neck_height = 70\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nlid_radius = body_neck_radius\nlid_height = 15\nlid_origin = rg.Point3d(0, 0, body_bottom_part_height + body_neck_height - lid_height)\nlid_normal = body_normal\n\n# Assembling\nbottle_lid = create_bottle_lid(lid_origin, lid_normal, lid_radius, lid_height)\n\n# Return created object by placing it in variable a\na = bottle_lid"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A bowl\nBowl Body: A semi-spherical or conical shape.\nParameters: body_height=80, body_bottom_radius=100, body_top_radius=125\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_bowl_body(origin, normal, bottom_radius, top_radius, height):\n    \"\"\"\n    This function creates a 3D model of a bowl body.\n    The body is modeled as a conical or semi-spherical shape.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): the origin of the bowl body plane\n        normal (Rhino.Geometry.Vector3d): the normal of bowl body plane\n        bottom_radius (float): the radius of the bottom of the bowl\n        top_radius (float): the radius of the top of the bowl\n        height (float): the height of the bowl\n\n    Return:\n        Rhino.Geometry.Brep: 3D model of the bowl body\n    \"\"\"\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n\n    try:\n        print(\"INFO: create_bowl_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle at the bottom of the bowl\n        base_circle = rg.Circle(plane, bottom_radius).ToNurbsCurve()\n\n        # Create the top circle at the top of the bowl\n        top_plane = rg.Plane(origin + normal * height, normal)\n        top_circle = rg.Circle(top_plane, top_radius).ToNurbsCurve()\n\n        # Create a .NET list to hold the curves\n        curveList = List[rg.Curve]()\n        curveList.Add(base_circle)\n        curveList.Add(top_circle)\n\n        closed = False\n        loft = rg.Brep.CreateFromLoft(curveList, rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n\n        print(\"INFO: create_bowl_body - return\", loft)\n        return loft\n\n    except Exception as error:\n        print(\"ERROR: create_bowl_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_height = 80\nbody_bottom_radius = 100\nbody_top_radius = 125\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\nbowl_body = create_bowl_body(body_origin, body_normal, body_bottom_radius, body_top_radius, body_height)\n\n# Return the created object by placing it in variable a\na = bowl_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A bowl\nBowl Base: A flat surface in a circular shape at the bottom of the bowl.\nParameters: base_radius=body_bottom_radius\nOrientation: base_origin=body_origin, base_normal=body_normal"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_bowl_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a bowl base. \n    The base is modeled as a circle at the base of the bowl.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): the origin of the bowl base plane\n        normal (Rhino.Geometry.Vector3d): the normal of bowl base plane \n        radius (float): the radius of the base\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the base\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_bowl_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle\n        base_circle = rg.Circle(plane, radius).ToNurbsCurve()\n\n        # Create the base\n        base = rg.Brep.CreatePlanarBreps(base_circle, TOLERANCE)[0]\n\n        print(\"INFO: create_bowl_base - return\", base)\n        return base\n\n    except Exception as error:\n        print(\"ERROR: create_bowl_base \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_bottom_radius = 150\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_bottom_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\nbowl_base = create_bowl_base(base_origin, base_normal, base_radius)\n\n# Return the created object by placing it in variable a\na = bowl_base"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A rectangular box that expands slightly upwards\nBox Body: A shape similar to a cuboid, but with a slight expansion in the vertical direction.\nParameters: body_width=80, body_length=150, body_height=100, body_expansion=1.2\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_expanding_box_body(origin, normal, length, width, height, expansion):\n    \"\"\"\n    This function creates a 3D model of an expanding box body. \n    The box is modeled as a brep.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the box plane\n        normal (Rhino.Geometry.Vector3d): normal of box plane - box will be created on this plane\n        length (float): the length of the box\n        width (float): the width of the box\n        height (float): the height of the box\n        expansion (float): the amount of expansion in the vertical direction\n\n    Return: \n        Rhino.Geometry.Brep: the created box\n    \"\"\"\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_expanding_box_body - start\", locals())\n        # Create a plane to locate the box\n        plane = rg.Plane(origin, normal)\n\n        # Create the base rectangle\n        base_rectangle = rg.Rectangle3d(plane, rg.Interval(-length / 2, length / 2),\n                                        rg.Interval(-width / 2, width / 2)).ToNurbsCurve()\n\n        # Create the top rectangle by expanding the base rectangle\n        top_rectangle = base_rectangle.Duplicate()  # Duplicate the base rectangle\n        scale_transformer = rg.Transform.Scale(plane, expansion, expansion,\n                                               1)  # Create transformer to scale the top rectangle\n        top_rectangle.Transform(scale_transformer)\n        top_rectangle.Translate(normal * height)  # Move the rectangle to the top\n\n        curveList = List[rg.Curve]()\n        curveList.Add(top_rectangle)\n        curveList.Add(base_rectangle)\n\n        closed = False\n        loft = rg.Brep.CreateFromLoft(curveList, rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n\n        print(\"INFO: create_bowl_body - return\", loft)\n        return loft\n\n    except Exception as error:\n        print(\"ERROR: create_expanding_box_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_width = 80\nbody_length = 150\nbody_height = 100\nbody_expansion = 1.2\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\nbox_body = create_expanding_box_body(body_origin, body_normal, body_length, body_width, body_height, body_expansion)\n\n# Return created object by placing it in variable a\na = box_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A rectangular box that expands slightly upwards\nBox Base: A flat surface in a rectangular shape, at the bottom of the box\nParameters: base_width=body_width, base_length=body_length\nOrientation: base_origin=body_origin, base_normal=body_normal\n"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_expanding_box_base(origin, normal, length, width):\n    \"\"\"\n    This function creates a 3D model of an expanding box base. \n    The base is modeled as a rectangle.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the base plane\n        normal (Rhino.Geometry.Vector3d): normal of base plane \n        length (float): the length of the base\n        width (float): the width of the base\n\n    Return: \n        Rhino.Geometry.Brep: the created base\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_expanding_box_base - start\", locals())\n        # Create a plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base rectangle\n        base_rectangle = rg.Rectangle3d(plane, rg.Interval(-length/2,length/2), rg.Interval(-width/2,width/2))\n\n        # Create the expanding box base by extruding the rectangle\n        base = rg.Brep.CreatePlanarBreps(base_rectangle.ToNurbsCurve(), TOLERANCE)[0]\n\n        print(\"INFO: create_expanding_box_base - return\", base)\n        return base\n\n    except Exception as error:\n        print(\"ERROR: create_expanding_box_base \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_length = 150\nbody_width = 100\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_length = body_length\nbase_width = body_width\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\nbox_base = create_expanding_box_base(base_origin, base_normal, base_length, base_width)\n\n# Return created object by placing it in variable a\na = box_base"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "An oval baking dish\nEllipse baking mold Body: An extruded ellipse.\nParameters: body_width=230, body_length=280, body_height=50\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "\u00ef\u00bb\u00bfimport rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_ellipse_baking_mold_body(origin, normal, width, length, height):\n    \"\"\"\n    This function creates a 3D model of a ellipse baking mold body. \n    The body of the mold is modeled as an extruded ellipse.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the body plane\n        normal (Rhino.Geometry.Vector3d): normal of body plane\n        length (float): the length of the body \n        width (float): the width of the body\n        height (float): the height of the body\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the baking mold body\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_ellipse_baking_mold_body - start\", locals())\n        # Create a plane to locate the body\n        body_plane = rg.Plane(origin, normal)\n\n        # Create the base of the body - the bottom ellipse\n        bottom_ellipse = rg.Ellipse(body_plane, length / 2, width / 2).ToNurbsCurve() # The dim input is a radius - divide by 2 = diameter\n\n        # Create the body - the extrusion of the ellipse\n        ellipse_body = rg.Extrusion.CreateExtrusion(bottom_ellipse, normal * height).ToBrep()\n\n        print(\"INFO: create_ellipse_baking_mold_body - return\", ellipse_body)\n        return ellipse_body\n    except Exception as error:\n        print(\"ERROR: create_ellipse_baking_mold_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\nbody_width = 230\nbody_length = 280\nbody_height = 50\n\n# Assembling\nellipse_baking_mold_body = create_ellipse_baking_mold_body(body_origin, body_normal, body_length, body_width, body_height)\n\n# Return the created object by placing it in variable a\na = ellipse_baking_mold_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "An oval baking dish\nEllipse baking mold Base: A flat ellipse surface.\nParameters: base_width=body_width, base_length=body_length\nOrientation: base_origin=body_origin, base_normal=body_normal"}, {"role": "assistant", "content": "\u00ef\u00bb\u00bfimport rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_ellipse_baking_mold_base(origin, normal, width, length):\n    \"\"\"\n    This function creates a 3D model of a ellipse baking mold base.\n    The base of the mold is modeled as a flat ellipse surface.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the base plane\n        normal (Rhino.Geometry.Vector3d): normal of base plane\n        length (float): the length of the base\n        width (float): the width of the base\n\n    Return:\n        Rhino.Geometry.Brep: 3D model of the baking mold base\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_ellipse_baking_mold_base - start\", locals())\n        # Create a plane to locate the base\n        base_plane = rg.Plane(origin, normal)\n\n        # Create the base ellipse\n        base_ellipse = rg.Ellipse(base_plane, length / 2, width / 2).ToNurbsCurve() # The dim input is a radius - divide by 2 = diameter\n\n        # Create the base surface\n        base_surface = rg.Brep.CreatePlanarBreps(base_ellipse, TOLERANCE)[0]\n\n        print(\"INFO: create_ellipse_baking_mold_base - return\", base_surface)\n        return base_surface\n\n    except Exception as error:\n        print(\"ERROR: create_ellipse_baking_mold_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\nbody_width = 230\nbody_length = 280\n\nbase_origin = body_origin\nbase_normal = body_normal.ZAxis\nbase_width = body_width\nbase_length = body_length\n\n# Assembling\nellipse_baking_mold_base = create_ellipse_baking_mold_base(base_origin, base_normal, base_length, base_width)\n\n# Return the created object by placing it in variable a\na = ellipse_baking_mold_base"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "An oval baking dish\nEllipse baking mold Rim: A half-pipe-shaped along the entire length of the ellipse\nParameters: rim_ellipse_length=body_length, rim_ellipse_width=body_width, rim_thickness=3, rim_height=6 \nAlignment: rim_alignment=body_normal\nOrientation: rim_origin=(0,0,body_height), rim_normal=XAxis"}, {"role": "assistant", "content": "\u00ef\u00bb\u00bfimport rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_ellipse_baking_mold_rim(origin, normal, width, length, height, alignment, thickness):\n    \"\"\"\n    This function creates a 3D model of a ellipse baking mold rim. \n    The rim of the mold is modeled a pipe cut vertically in the shape of an ellipse.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): the origin of the rim plane\n        normal (Rhino.Geometry.Vector3d): the normal of the rim plane\n        alignment (Rhino.Geometry.Vector3d): the direction in which the rim expands\n        height (float): the height of the rim\n        thickness (float): the thickness of the rim\n        length (float): the length of the ellipse \n        width (float): the width of the ellipse \n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the baking mold rim\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_ellipse_baking_mold_rim - start\", locals())\n        if thickness == 0 or height == 0:  # No rim option\n            return None\n        # Create a plane to locate the rim\n        rim_plane = rg.Plane(origin, alignment)\n\n        # Create an ellipse at the top of the rim\n\n        top_ellipse = rg.Ellipse(rim_plane, length / 2,\n                                 width / 2).ToNurbsCurve()  # The input is a radius -> divided by 2 = diameter\n\n        # Determining an arc section for sweeping\n        start_pt = origin + (normal * length / 2)  # From the center of the ellipse to the edge\n        end_pt = start_pt - (alignment * height)\n        mid_pt = start_pt - (alignment * height) / 2 + (normal * thickness)\n        arc = rg.Arc(start_pt, mid_pt, end_pt).ToNurbsCurve()\n\n        # Sweep the arc along the ellipse shape to create the rim\n        closed = False\n        rim = rg.Brep.CreateFromSweep(top_ellipse, arc, closed, TOLERANCE)[0]\n\n        print(\"INFO: create_ellipse_baking_mold_rim - return\", rim)\n        return rim\n\n    except Exception as error:\n        print(\"ERROR: create_ellipse_baking_mold_rim \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_height = 50\nbody_width = 230\nbody_length = 280\nbody_normal = rg.Vector3d.ZAxis\n\nrim_ellipse_width = body_width\nrim_ellipse_length = body_length\nrim_origin = rg.Point3d(0, 0, body_height)\nrim_normal = rg.Vector3d.XAxis # The 'sweep' works well when using this axis\nrim_alignment = body_normal.ZAxis\nrim_height = 6\nrim_thickness = 3\n\n# Assembling\nellipse_baking_mold_rim = create_ellipse_baking_mold_rim(rim_origin, rim_normal, rim_ellipse_length, rim_ellipse_width, rim_height, rim_alignment, rim_thickness)\n\n# Return the created object by placing it in variable a\na = ellipse_baking_mold_rim"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A round flower pot that expands upwards with protruding edges and with a perforated bottom\nPot Body: a semi-sphere or a cylinder with a slight curve outwards at the top edge\nParameters: body_height=100, body_bottom_radius=100, body_top_radius=120, body_edge_protrusion=10, body_edge_protrusion_reltive_hieght=0.8\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\nimport math\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_expanding_pot_body(origin, normal, bottom_radius, top_radius, height, edge_protrusion,\n                              edge_protrusion_reltaive_height):\n    \"\"\"\n    This function creates a 3D model of a flower pot body.\n    The body is modeled as a cylinder with a slight curve outwards at the top edge.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot body plane\n        normal (Rhino.Geometry.Vector3d): normal of pot body plane\n        bottom_radius (float): the radius of the bottom of the pot\n        top_radius (float): the radius of the top of the pot\n        height (float): the height of the pot\n        edge_protrusion (float): the amount of protrusion of the edge of the pot\n        edge_protrusion_reltive_hieght (float): the relative height of the upper protrusion\n\n    Return:\n        Rhino.Geometry.Brep: 3D model of the pot body\n    \"\"\"\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n\n    try:\n        print(\"INFO: create_expanding_pot_body - start\", locals())\n        # Create plane to locate the pot\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle at the bottom of the pot\n        base_circle = rg.Circle(plane, bottom_radius).ToNurbsCurve()\n\n        # Create the top circle at the top of the pot\n        top_plane_origin = origin + plane.Normal * height * edge_protrusion_reltaive_height\n        top_plane = rg.Plane(top_plane_origin, normal)\n        top_circle = rg.Circle(top_plane, top_radius).ToNurbsCurve()\n\n        # Create the edge protrusion\n        protrusion_bottom_circle = rg.Circle(top_plane, top_radius + edge_protrusion).ToNurbsCurve()\n        protrusion_top_circle = protrusion_bottom_circle.Duplicate()\n        protrusion_top_circle.Translate(normal * height * (1 - edge_protrusion_reltaive_height))\n\n        # Create a .NET list to hold the curves\n        curveList = List[rg.Curve]()\n        curveList.Add(base_circle)\n        curveList.Add(top_circle)\n        curveList.Add(protrusion_bottom_circle)\n        curveList.Add(protrusion_top_circle)\n\n        closed = False\n        loft = rg.Brep.CreateFromLoft(curveList, rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n\n        print(\"INFO: create_expanding_pot_body - return\", loft)\n        return loft\n\n    except Exception as error:\n        print(\"ERROR: create_bowl_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_bottom_radius = 100\nbody_top_radius = 120\nbody_height = 100\nbody_edge_protrusion = 10\nbody_edge_protrusion_relative_height = 0.8\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\npot_body = create_expanding_pot_body(body_origin, body_normal, body_bottom_radius, body_top_radius, body_height, body_edge_protrusion, body_edge_protrusion_relative_height)\n\n# Return created object by placing it in variable a\na = pot_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A round flower pot that expands upwards with protruding edges and with a perforated bottom\nPot Base: A perforated flat surface in circle shape at the bottom of the pot. The holes are located in circle around the center of the surface\nParameters: base_radius=body_bottom_radius, holes_radius=10,  holes_amount=4, holes_distance_from_center=40\nOrientation: base_origin=body_origin, base_normal=body_normal"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\nimport math\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_pot_base(origin, normal, base_radius, holes_radius, holes_amount, holes_distance_from_center):\n    \"\"\"\n    This function creates a 3D model of a pot base.\n    The base is modeled as a perforated flat surface in circle shape at the bottom of the pot.\n    The holes are located in a circle around the center of the surface.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot base plane\n        normal (Rhino.Geometry.Vector3d): normal of pot base plane\n        base_radius (float): the radius of the base\n        holes_radius (float): the radius of the holes\n        holes_amount (int): the amount of holes in the base\n        holes_distance_from_center (float): the distance of the holes from the center of the base\n\n    Return:\n        Rhino.Geometry.Brep: 3D model of the pot base\n    \"\"\"\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n    import math\n\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_pot_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base\n        base_circle = rg.Circle(plane, base_radius)\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(), TOLERANCE)[0]\n\n        # Create the holes\n        holes = []\n        holesList = List[rg.Brep]()\n\n        for i in range(holes_amount):\n            angle = i * (2 * math.pi / holes_amount)\n            x = holes_distance_from_center * math.cos(angle)\n            y = holes_distance_from_center * math.sin(angle)\n            hole_origin = plane.PointAt(x, y)\n            hole_normal = plane.Normal\n            hole_plane = rg.Plane(hole_origin, hole_normal)\n            hole = rg.Circle(hole_plane, holes_radius).ToNurbsCurve()\n            hole = rg.Brep.CreatePlanarBreps(hole, TOLERANCE)[0]\n            holes.append(hole)\n            holesList.Add(hole)\n\n        # Subtract the holes from the base\n        curveList = List[rg.Brep]()\n        curveList.Add(base)\n\n        res = rg.Brep.CreateBooleanDifference(curveList, holesList, TOLERANCE)[0]\n\n        print(\"INFO: create_pot_base - return\", res)\n        return res\n    except Exception as error:\n        print(\"ERROR: create_pot_base \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_bottom_radius = 150\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_bottom_radius\nholes_radius = 10\nholes_amount = 4\nholes_distance_from_center = 40\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\npot_base = create_pot_base(base_origin, base_normal, base_radius, holes_radius, holes_amount, holes_distance_from_center)\n\n# Return created object by placing it in variable a\na = pot_base"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A 30 cm high glass\nGlass Body: An open cylindrical shape.\nParameters: body_height=300, body_radius=80\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_glass_body(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a glass body. \n    The body is modeled as an open cylinder.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): the origin of the glass body plane\n        normal (Rhino.Geometry.Vector3d): the normal of the glass body plane\n        radius (float): the radius of the glass body\n        height (float): the height of the glass body\n\n    Return: \n        Rhino.Geometry.Brep: the created 3D model\n    \"\"\"\n\n    try:\n        print(\"INFO: create_glass_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle at the bottom of the glass\n        base_circle = rg.Circle(plane, radius)\n\n        # Create open cylinder\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = False\n        cap_top = False\n        glass = cylinder.ToBrep(cap_bottom, cap_top)\n\n        print(\"INFO: create_glass_body - return\", glass)\n        return glass\n\n    except Exception as error:\n        print(\"ERROR: create_glass_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_radius = 80\nbody_height = 300\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\nglass_body = create_glass_body(body_origin, body_normal, body_radius, body_height)\n\n# Return the created object by placing it in variable a\na = glass_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A 30 cm high glass\nGlass Base: A flat circular shape at the bottom of the glass.\nParameters: base_radius=body_radius\nOrientation: base_origin=body_origin, base_normal=body_normal"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_glass_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a glass base.\n    The base is modeled as a circle at the base of the glass.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the glass base plane\n        normal (Rhino.Geometry.Vector3d): normal of glass base plane\n        radius (float): the radius of the base\n\n    Return:\n        Rhino.Geometry.Brep: 3D model of the base\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_glass_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle\n        base_circle = rg.Circle(plane, radius).ToNurbsCurve()\n\n        # Create the base\n        base = rg.Brep.CreatePlanarBreps(base_circle, TOLERANCE)[0]\n\n        print(\"INFO: create_glass_base - return\", base)\n        return base\n\n    except Exception as error:\n        print(\"ERROR: create_glass_base \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_radius = 60\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\nglass_base = create_glass_base(base_origin, base_normal, base_radius)\n\n# Return the created object by placing it in variable a\na = glass_base"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "S shape hook with rounded caps\nHook Body: S-shaped pipe with rounded caps. The shape consists of two connected arcs at the top and bottom of the body.\nParameters: body_top_arc_radius=10, body_bottom_arc_radius=15, body_height=60, body_thickness=2, body_arc_angle_domain_relative_pi=1.25\nAlignment: body_alignment=YAxis (Horizontal)\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\nimport math\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_s_shape_hook_body(origin, normal, alignment, top_arc_radius, bottom_arc_radius, height, thickness,\n                             arc_angle_domain_relative_pi):\n    \"\"\"\n    Create a 3D model of an S shape hook with rounded caps body. \n    The body is modeled as S-shaped pipe with rounded cap. The shape consists of two connected arcs at the top and bottom of the body..\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the hook body plane\n        normal (Rhino.Geometry.Vector3d): normal of hook body plane \n        alignment (Rhino.Geometry.Vector3d): the direction in which the hook body is created\n        top_arc_radius (float): the radius of the top arc\n        bottom_arc_radius (float): the radius of the bottom arc\n        height (float): the total height of the body\n        thickness (float): the thickness of the pipe that models the hook\n        arc_angle_domain_relative_pi (float): length of the arc in as a product of PI\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the S-shaped hook body\n    \"\"\"\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n    import math\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_s_shape_hook_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the top arc\n        top_arc_center = plane.Origin + alignment * (height / 2 - top_arc_radius)\n        top_arc = rg.Arc(top_arc_center, top_arc_radius, math.pi * arc_angle_domain_relative_pi).ToNurbsCurve()\n\n        # Create the bottom arc\n        bottom_arc_center = plane.Origin - alignment * (height / 2 - bottom_arc_radius)\n        bottom_arc = rg.Arc(bottom_arc_center, bottom_arc_radius, math.pi * arc_angle_domain_relative_pi).ToNurbsCurve()\n        # Flip the bottom arc\n        bottom_arc.Rotate(math.pi, normal, bottom_arc_center)\n        bottom_arc.Reverse()\n        line_between_arcs = rg.Curve.CreateBlendCurve(top_arc, bottom_arc, rg.BlendContinuity.Position)\n\n        curveList = List[rg.Curve]()\n        curveList.Add(top_arc)\n        curveList.Add(line_between_arcs)\n        curveList.Add(bottom_arc)\n\n        s_shape_rail = rg.Curve.JoinCurves(curveList)[0]\n\n        # Create the body by pipe around the rail\n        local_blending = True\n        fit_rail = True\n        s_shape_hook_body = \\\n        rg.Brep.CreatePipe(s_shape_rail, thickness, local_blending, rg.PipeCapMode.Round, fit_rail, TOLERANCE,\n                           TOLERANCE)[0]\n        print(\"INFO: create_s_shape_hook_body - return\", s_shape_hook_body)\n        return s_shape_hook_body\n\n    except Exception as error:\n        print(\"ERROR: create_s_shape_hook_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_top_arc_radius = 10\nbody_bottom_arc_radius = 15\nbody_height = 60\nbody_thickness = 2\nbody_arc_angle_domain_relative_pi = 1.25\nbody_alignment = rg.Vector3d.YAxis\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\ns_shape_hook_body = create_s_shape_hook_body(body_origin, body_normal, body_alignment, body_top_arc_radius, body_bottom_arc_radius, body_height, body_thickness, body_arc_angle_domain_relative_pi)\n\n# Return created object by placing it in variable a\na = s_shape_hook_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A plate\nPlate Body: curved or sloping sides that extend upward from the base.\nParameters: body_bottom_radius=100, body_top_radius=140, body_height=21\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "\u00ef\u00bb\u00bfimport rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\nimport math\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_plate_body(body_origin, body_normal, body_bottom_radius, body_top_radius, body_height):\n    \"\"\"\n    This function creates a 3D model of a plate body. \n    The plate body is modeled as sloping sides that extend upward from the base\n\n    Parameters:\n        body_origin (Rhino.Geometry.Point3d): the origin of the plate body plane\n        body_normal (Rhino.Geometry.Vector3d): the normal of plate body plane\n        body_bottom_radius (float): the radius of the base of the plate body\n        body_top_radius (float): the radius of the top of the plate body\n        body_height (float): the plate's body height\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the plate body\n    \"\"\"\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n\n    try:\n        print(\"INFO: create_plate_body - start\", locals())\n        # Create plane to locate the plate body\n        body_plane = rg.Plane(body_origin, body_normal)\n\n        # Create the bottom part of the body\n        body_bottom_circle = rg.Circle(body_plane, body_bottom_radius).ToNurbsCurve()\n\n        # Create the top part of the plate body\n        body_top_plane = rg.Plane(body_origin + body_normal * body_height, body_normal)\n        body_top_circle = rg.Circle(body_top_plane, body_top_radius).ToNurbsCurve()\n\n        # Create a .NET list to hold the curves\n        curveList = List[rg.Curve]()\n        curveList.Add(body_bottom_circle)\n        curveList.Add(body_top_circle)\n\n        closed = False\n        loft = rg.Brep.CreateFromLoft(curveList, rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n\n        print(\"INFO: create_plate_body - return\", loft)\n        return loft \n    except Exception as error:\n        print(\"ERROR: create_plate_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_bottom_radius = 100\nbody_top_radius = 140\nbody_height = 21\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\nplate_body = create_plate_body(body_origin, body_normal, body_bottom_radius, body_top_radius, body_height)\n\n# Return the created object by placing it in variable a\na = plate_body\n"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A plate\nPlate Base: A flat surface in a circle shape at the bottom of the plate.\nParameters: base_radius=body_bottom_radius\nOrientation: base_origin=body_origin, base_normal=body_normal"}, {"role": "assistant", "content": "\u00ef\u00bb\u00bfimport rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_plate_base(origin, normal, base_radius):\n    \"\"\"\n    This function creates a 3D model of a plate base. \n    The plate base is modeled as a flat surface in a circle shape at the bottom of the plate.\n\n    Parameters:\n        base_origin (Rhino.Geometry.Point3d): the origin of the plate base plane\n        base_normal (Rhino.Geometry.Vector3d): the normal of the plate base plane\n        base_radius (float): the radius of the plate base\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the plate\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_plate_base - start\", locals())\n        # Create a plane to locate the plate base\n        base_plane = rg.Plane(origin, normal)\n\n        # Create the plate base\n        base_circle = rg.Circle(base_plane, base_radius).ToNurbsCurve()\n        plate_base = rg.Brep.CreatePlanarBreps(base_circle, TOLERANCE)[0]\n\n        print(\"INFO: create_plate_base - return\", plate_base)\n        return plate_base\n\n    except Exception as error:\n        print(\"ERROR: create_plate_base \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_bottom_radius = 100\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_bottom_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\nplate_base = create_plate_base(base_origin, base_normal, base_radius)\n\n# Return the created object by placing it in variable a\na = plate_base\n"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "Toothpick dispenser in a round shape with a perforated upper lid\nToothpick Dispenser Body: a Cylinder shape\nParameters: body_height=60, body_radius=20\nOrientation: body_origin=(0,0,0), body_normal=ZAxis"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\nimport math\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_toothpick_dispenser_body(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a toothpick dispenser body. \n    The body is modeled as a cylinder.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the toothpick dispenser body plane\n        normal (Rhino.Geometry.Vector3d): normal of toothpick dispenser body plane \n        radius (float): the radius of the body\n        height (float): the height of the body\n\n    Return: \n    Rhino.Geometry.Brep: 3D model of the body\n    \"\"\"\n\n    try:\n        print(\"INFO: create_toothpick_dispenser_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle at the bottom of the mug\n        base_circle = rg.Circle(plane, radius)\n\n        # Create cylinder with open bottom and top\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = False\n        cap_top = False\n        body = cylinder.ToBrep(cap_bottom, cap_top)\n        print(\"INFO: create_toothpick_dispenser_body - return\", body)\n        return body\n\n    except Exception as error:\n        print(\"ERROR: create_toothpick_dispenser_body \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_radius = 20\nbody_height = 60\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\ntoothpick_dispenser_body = create_toothpick_dispenser_body(body_origin, body_normal, body_radius, body_height)\n\n# Return created object by placing it in variable a\na = toothpick_dispenser_body\n"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "Toothpick dispenser in a round shape with a perforated upper lid\nToothpick Dispenser Base: A flat surface in circle shape at the bottom of the body.\nParameters: base_radius=body_radius\nOrientation: base_origin=body_origin, base_normal=body_normal"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\nimport math\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_toothpick_dispenser_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a toothpick dispenser base. \n    The base is modeled as a circle at the bottom of the dispenser.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the toothpick dispenser base plane\n        normal (Rhino.Geometry.Vector3d): normal of toothpick dispenser base plane \n        radius (float): the radius of the base\n\n    Return: \n    Rhino.Geometry.Brep: 3D model of the base\n    \"\"\"\n    TOLERANCE = 0.01\n\n    try:\n        print(\"INFO: create_toothpick_dispenser_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base surface\n        base_circle = rg.Circle(plane, radius).ToNurbsCurve()\n        base = rg.Brep.CreatePlanarBreps(base_circle, TOLERANCE)[0]\n\n        print(\"INFO: create_toothpick_dispenser_base - return\", base)\n        return base\n\n    except Exception as error:\n        print(\"ERROR: create_toothpick_dispenser_base \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_radius = 50\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\ntoothpick_dispenser_base = create_toothpick_dispenser_base(base_origin, base_normal, base_radius)\n\n# Return the created object by placing it in variable a\na = toothpick_dispenser_base"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "Toothpick dispenser in a round shape with a perforated upper lid\nToothpick Dispenser Lid: A perforated flat circular disk shape on the top of the body. The holes are located in circle around the center of the surface\nParameters: lid_radius=body_radius, holes_radius=1.5,  holes_amount=6, holes_distance_from_center=20\nOrientation: lid_origin=(0,0,body_height), lid_normal=body_normal"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\nimport math\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_toothpick_dispenser_lid(origin, normal, radius, holes_radius, holes_amount, holes_distance_from_center):\n    \"\"\"\n    This function creates a 3D model of a toothpick dispenser lid. \n    The lid is modeled as a perforated flat circular disk shape. The holes are modeled as cylinders.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the lid plane\n        normal (Rhino.Geometry.Vector3d): normal of lid plane\n        radius (float): the radius of the lid\n        holes_radius (float): the radius of the holes\n        holes_amount (int): the number of holes in the lid\n        holes_distance_from_center (flaot): the distance of the holes from the center of the lid\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the lid\n    \"\"\"\n    import math\n    TOLERANCE = 0.01\n    import clr\n    clr.AddReference(\"System.Collections\")\n    from System.Collections.Generic import List\n\n    try:\n        print(\"INFO: create_toothpick_dispenser_lid - start\", locals())\n        # Create the plane to locate the lid\n        plane = rg.Plane(origin, normal)\n\n        # Create the lid\n        lid = rg.Circle(plane, radius).ToNurbsCurve()\n        lid = rg.Brep.CreatePlanarBreps(lid, TOLERANCE)[0]\n\n        # Create the holes\n        holes = []\n        holesList = List[rg.Brep]()\n\n        # Create the holes\n        holes = []\n        for i in range(int(holes_amount)):\n            angle = i * (2 * math.pi / holes_amount)\n            x = holes_distance_from_center * math.cos(angle)\n            y = holes_distance_from_center * math.sin(angle)\n            hole_origin = plane.PointAt(x, y)\n            hole_normal = plane.Normal\n            hole_plane = rg.Plane(hole_origin, hole_normal)\n            hole = rg.Circle(hole_plane, holes_radius).ToNurbsCurve()\n            hole = rg.Brep.CreatePlanarBreps(hole, TOLERANCE)[0]\n            holes.append(hole)\n            holesList.Add(hole)\n\n        # Subtract the holes from the base\n        curveList = List[rg.Brep]()\n        curveList.Add(lid)\n\n        # Boolean difference to create the holes\n        lid = rg.Brep.CreateBooleanDifference(curveList, holesList, TOLERANCE)[0]\n        print(\"INFO: create_toothpick_dispenser_lid - return\", lid)\n        return lid\n\n    except Exception as error:\n        print(\"ERROR: create_toothpick_dispenser_lid \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_radius = 50\nbody_height = 100\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nlid_radius = body_radius\nlid_origin = rg.Point3d(0,0,body_height)\nlid_normal = body_normal\n\nholes_radius = 2\nholes_amount = 6\nholes_distance_from_center = 20\n\n# Assembling\ntoothpick_dispenser_lid = create_toothpick_dispenser_lid(lid_origin, lid_normal, lid_radius, holes_radius, holes_amount, holes_distance_from_center)\n\n# Return created object by placing it in variable a\na = toothpick_dispenser_lid"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "Toothpick dispenser in a round shape with a perforated upper lid\nToothpick Dispenser Lid Retention Ring: An inner ring at the bottom of the lid that holds it inside the body. A little bit smaller than the body radius.\nParameters: lid_ring_distance_from_body=2, lid_ring_radius=body_radius-lid_ring_distance_from_body, lid_ring_height=10\nOrientation: lid_origin=(0,0,body_height-lid_ring_height), lid_normal=body_normal"}, {"role": "assistant", "content": "import rhinoinside\nrhinoinside.load()\nimport Rhino.Geometry as rg\nimport traceback\nimport math\n\nprint('finished loading rhinoinside')\nTOLERANCE = 0.01\n\n\ndef create_toothpick_dispenser_lid_retention_ring(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a toothpick dispenser lid retention ring. \n    The ring is modeled as a torus.\n\n    Parameters:\n        lid_origin (Rhino.Geometry.Point3d): origin of the lid plane\n        lid_normal (Rhino.Geometry.Vector3d): normal of lid plane\n        body_radius (float): the radius of the body\n        lid_ring_radius (float): the radius of the ring\n        lid_ring_height (float): the height of the ring\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the lid retention ring\n    \"\"\"\n    try:\n        print(\"INFO: create_toothpick_dispenser_lid_retention_ring - start\", locals())\n        # Create plane to locate the ring\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle at the bottom of the mug\n        base_circle = rg.Circle(plane, radius)\n\n        # Create cylinder with open bottom and top\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = False\n        cap_top = False\n        ring = cylinder.ToBrep(cap_bottom, cap_top)\n\n        print(\"INFO: create_toothpick_dispenser_lid_retention_ring - return\", ring)\n        return ring\n\n    except Exception as error:\n        print(\"ERROR: create_toothpick_dispenser_lid_retention_ring \", \"An error occurred:\", traceback.format_exc())\n        return None\n\n\n# Parameters\nbody_radius = 100\nbody_height = 200\nbody_origin = rg.Point3d(0,0,0)\nbody_normal = rg.Vector3d.ZAxis\n\nlid_ring_distance_from_body = 2\nlid_ring_radius = body_radius - lid_ring_distance_from_body\nlid_ring_height = 10\nlid_ring_origin = rg.Point3d(0,0,body_height-lid_ring_height)\nlid_ring_normal = body_normal\n\n# Assembling\ntoothpick_dispenser_lid_retention_ring = create_toothpick_dispenser_lid_retention_ring(lid_ring_origin, lid_ring_normal, lid_ring_radius, lid_ring_height)\n\n# Return the created object by placing it in variable a\na = toothpick_dispenser_lid_retention_ring"}]}
