{"messages": [{"role": "system", "content": "Your role is to create full program out of several parts.\nThe united output should be in as array parameter a.\nStructure of full program:\n- All imports\n- Constant parameters\n- All functions of the different parts include implementation\n- List of parameters from all the parts\n- calling every function of each part\n- and eventually all the part in array named 'a':\na = [part1, part2, ....]"}, {"role": "user", "content": "Object: A bowl\n\npart 1\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_bowl_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a bowl base. \n    The base is modeled as a circle at the bottom of the bowl.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the bowl base plane\n        normal (Rhino.Geometry.Vector3d): normal of bowl base plane \n        radius (float): the radius of the base\n\n    Return: \n        Rhino.Geometry.Brep: the created base\n    \"\"\"\n    try:\n        print(\"INFO: create_bowl_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle\n        base_circle = rg.Circle(plane, radius)\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(),TOLERANCE)[0]\n        \n        print(\"INFO: create_bowl_base - return\", base)\n        return base\n    except Exception as error:\n        print(\"ERROR: create_bowl_base \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nbody_bottom_radius = 75\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_bottom_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\nbowl_base = create_bowl_base(base_origin, base_normal, base_radius)\n\n# Return created object by placing it in variable a\na = bowl_base\n\npart 2\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\n\ndef create_bowl_body(origin, normal, bottom_radius, middle_radius, upper_radius, height):\n    \"\"\"\n    This function creates a 3D model of a bowl body. \n    The body is modeled as a truncated cone.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the bowl body plane\n        normal (Rhino.Geometry.Vector3d): normal of bowl body plane \n        bottom_radius (float): the radius of the bottom of the bowl \n        middle_radius (float): the radius of the middle part of the bowl\n        upper_radius (float): the radius of the upper part of the bowl\n        height (float): the height of the bowl\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the bowl body\n    \"\"\"\n    try:\n        print(\"INFO: create_bowl_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle at the bottom of the bowl\n        base_circle = rg.Circle(plane, bottom_radius)\n\n        # Create the top circle at the middle of the bowl\n        mid_plane = rg.Plane(plane)\n        mid_plane.Translate(plane.Normal*height*0.5)\n        mid_circle = rg.Circle(mid_plane, middle_radius)\n\n        # Create the top circle at the top of the bowl\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, upper_radius)\n\n        # Create the bowl by lofting the two circles\n        closed = False\n        bowl = rg.Brep.CreateFromLoft([base_circle.ToNurbsCurve(), mid_circle.ToNurbsCurve(), top_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n\n        print(\"INFO: create_bowl_body - return\", bowl)\n        return bowl\n    except Exception as error:\n        print(\"ERROR: create_bowl_body \",\n              \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nbody_height = 90\nbody_bottom_radius = 30\nbody_middle_radius = 110\nbody_upper_radius = 140\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\nbowl_body = create_bowl_body(body_origin, body_normal, body_bottom_radius,\n                             body_middle_radius, body_upper_radius, body_height)\n\n# Return created object by placing it in variable a\na = bowl_body\n"}, {"role": "assistant", "content": "import Grasshopper as gh\nimport System.Drawing as sd\nimport Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\ncomp = ghenv.Component\nghdoc = comp.OnPingDocument()\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE, 10))\n\ndef create_bowl_body(origin, normal, bottom_radius, middle_radius, upper_radius, height):\n    \"\"\"\n    This function creates a 3D model of a bowl body. \n    The body is modeled as a truncated cone.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the bowl body plane\n        normal (Rhino.Geometry.Vector3d): normal of bowl body plane \n        bottom_radius (float): the radius of the bottom of the bowl \n        middle_radius (float): the radius of the middle part of the bowl\n        upper_radius (float): the radius of the upper part of the bowl\n        height (float): the height of the bowl\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the bowl body\n    \"\"\"\n    try:\n        print(\"INFO: create_bowl_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle at the bottom of the bowl\n        base_circle = rg.Circle(plane, bottom_radius)\n\n        # Create the top circle at the middle of the bowl\n        mid_plane = rg.Plane(plane)\n        mid_plane.Translate(plane.Normal*height*0.5)\n        mid_circle = rg.Circle(mid_plane, middle_radius)\n\n        # Create the top circle at the top of the bowl\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, upper_radius)\n\n        # Create the bowl by lofting the two circles\n        closed = False\n        bowl = rg.Brep.CreateFromLoft([base_circle.ToNurbsCurve(), mid_circle.ToNurbsCurve(\n        ), top_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n\n        print(\"INFO: create_bowl_body - return\", bowl)\n        return bowl\n    except Exception as error:\n        print(\"ERROR: create_bowl_body \",\n              \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\ndef create_bowl_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a bowl base. \n    The base is modeled as a circle at the bottom of the bowl.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the bowl base plane\n        normal (Rhino.Geometry.Vector3d): normal of bowl base plane \n        radius (float): the radius of the base\n\n    Return: \n        Rhino.Geometry.Brep: the created base\n    \"\"\"\n    try:\n        print(\"INFO: create_bowl_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle\n        base_circle = rg.Circle(plane, radius)\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(),TOLERANCE)[0]\n        \n        print(\"INFO: create_bowl_base - return\", base)\n        return base\n    except Exception as error:\n        print(\"ERROR: create_bowl_base \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\ndef AddParam(name, IO):\n    assert IO in ('Output', 'Input')\n    params = [param.NickName for param in getattr(ghenv.Component.Params,IO)]\n    if name not in params:\n        param = gh.Kernel.Parameters.Param_GenericObject()\n        param.NickName = name\n        param.Name = name\n        param.Description = name\n        param.Optional = True\n        index = getattr(ghenv.Component.Params, IO).Count\n        registers = dict(Input  = 'RegisterInputParam'\n                        ,Output = 'RegisterOutputParam')\n        getattr(ghenv.Component.Params,registers[IO])(param, index)\n        ghenv.Component.Params.OnParametersChanged()\n        return param\n    return None              \n\ndef AddSlider(min, max, value, target, index):\n    slider = gh.Kernel.Special.GH_NumberSlider()\n    slider.Slider.Maximum = max\n    slider.Slider.Minimum = min\n    slider.Slider.Value = value\n    slider.Slider.DecimalPlaces = 1\n    ghdoc.AddObject(slider,False,ghdoc.ObjectCount+1)\n    #set the slider location\n    thisBounds = ghenv.Component.Attributes.Bounds\n    slider.Attributes.Pivot = sd.PointF(thisBounds.X-thisBounds.Width-100,thisBounds.Y + 20 + (25*index))\n    target.AddSource(slider)\n\nclass InputSlider():\n    def __init__(self, name, value, min, max):\n        self.name = name\n        self.value = value\n        self.min = min\n        self.max = max\n        \ndef create_params():\n    input_list = [\n        InputSlider('body_height', 90, 0, 300),\n        InputSlider('body_bottom_radius', 30, 0, 300),\n        InputSlider('body_middle_radius', 110, 0, 300),\n        InputSlider('body_upper_radius', 140, 0, 300),\n        ]\n    for i, input_ in enumerate(input_list):\n        param = AddParam(input_.name, 'Input')\n        if(param):\n            AddSlider(input_.min, input_.max, input_.value, param, i)\n\ncreate_params()\n\n# User Parameters:\ntry: body_height \nexcept: body_height = 90\n\ntry: body_bottom_radius \nexcept: body_bottom_radius = 30\n\ntry: body_middle_radius\nexcept: body_middle_radius = 110\n\ntry: body_upper_radius\nexcept: body_upper_radius = 140\n\n# Internal Parameters:\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_bottom_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\nbowl_body = create_bowl_body(body_origin, body_normal, body_bottom_radius, body_middle_radius, body_upper_radius, body_height)\nbowl_base = create_bowl_base(base_origin, base_normal, base_radius)\n\n# Return created object by placing it in variable a\na = [bowl_body,bowl_base]"}]}
{"messages": [{"role": "system", "content": "Your role is to create full program out of several parts.\nThe united output should be in as array parameter a.\nStructure of full program:\n- All imports\n- Constant parameters\n- All functions of the different parts include implementation\n- List of parameters from all the parts\n- calling every function of each part\n- and eventually all the part in array named 'a':\na = [part1, part2, ....]"}, {"role": "user", "content": "Object: A mug\n\npart 1\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_mug_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a mug base. \n    The base is modeled as a circle at the base of the mug.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the mug base plane\n        normal (Rhino.Geometry.Vector3d): normal of mug base plane \n        radius (float): the radius of the base\n\n    Return: \n        Rhino.Geometry.Circle: the created circle\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle\n        base_circle = rg.Circle(plane, radius)\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(),TOLERANCE)[0]\n        \n        print(\"INFO: create_mug_base - return\", base)\n        return base\n    except Exception as error:\n        print(\"ERROR: create_mug_base \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n        \n# Parameters\nbody_radius = 75\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\nmug_base = create_mug_base(base_origin, base_normal, base_radius)\n\n# Return created object by placing it in variable a\na = mug_base\n\npart 2\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_mug_body(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a mug body. \n    The body is modeled as a cylinder.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the mug body plane\n        normal (Rhino.Geometry.Vector3d): normal of mug body plane \n        radius (float): the radius of the mug \n        height (float): the height of the mug\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the mug body\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the mug\n        base_circle = rg.Circle(plane, radius)\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = False\n        cap_top = False\n        mug = cylinder.ToBrep(cap_bottom, cap_top)\n        print(\"INFO: create_mug_body - return\", mug)\n        return mug\n    except Exception as error:\n        print(\"ERROR: create_mug_body \", traceback.format_exc())\n        return DEFAULT_BREP\n\n# Parameters\nbody_radius = 50\nbody_height = 100\nbody_origin = rg.Point3d(0,0,0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\nmug_body = create_mug_body(body_origin, body_normal, body_radius, body_height)\n\n# Return created object by placing it in variable a\na = mug_body\n\npart 3\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_mug_handle(origin, normal, alignment, height, width, thickness):\n    \"\"\"\n    Create a 3D model of a mug handle\n    The handle is modeled as a slightly elongated semi-circle or crescent\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the handle - center of handle circle\n        normal (Rhino.Geometry.Vector3d): normal of handle plane - tangent of handle\n        alignmen (Rhino.Geometry.Vector3d): The direction to define the start and end point of the handle in relation to the origin\n        height (float): the height of the handle\n        width (float): The width of the handle\n        thickness (float): The thickness of the handle\n    \n    Returns:\n    Rhino.Geometry.Brep: The created semi cylinder\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_handle - start\", locals())\n        # Create semi circle\n        radius = width/2\n        handle_start_point = origin + (alignment * radius)\n        handle_end_point = origin - (alignment * radius)\n        semi_circle = rg.Arc(handle_start_point, normal, handle_end_point).ToNurbsCurve()\n        \n        # Scale the semi-circle to create an elongated semi-circle or crescent\n        plane = rg.Plane(origin,normal)\n        transform = rg.Transform.Scale(plane, 1, height/radius, 1)\n        semi_circle.Transform(transform)\n        \n        # Create a circle at the start of the semi-circle for the thickness\n        start_point_plane = rg.Plane(semi_circle.PointAtStart ,semi_circle.TangentAtStart)\n        shape_circle = rg.Circle(start_point_plane, thickness/2)\n        \n        # Sweep the shape circle along the semi-circle to create the handle\n        closed = False\n        handle = rg.Brep.CreateFromSweep(semi_circle, shape_circle.ToNurbsCurve(), closed , TOLERANCE)[0]\n        print(\"INFO: create_mug_handle - return\", handle)\n        return handle\n    except Exception as error:\n        print(\"ERROR: create_mug_handle \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nbody_radius = 50\nbody_height = 100\nbody_origin = rg.Point3d(0,0,0)\nbody_normal = rg.Vector3d.ZAxis\n\nhandle_height = 70\nhandle_width = 30\nhandle_thickness = 10\nhandle_relative_height = 0.5\nhandle_alignment = body_normal.ZAxis\nhandle_origin = rg.Point3d(body_radius,0, body_height * handle_relative_height)\nhandle_normal = body_normal.XAxis\n\n# Assembling\nmug_handle = create_mug_handle(handle_origin, handle_normal, handle_alignment, handle_height, handle_width, handle_thickness)\n\n# Return created object by placing it in variable a\na = mug_handle"}, {"role": "assistant", "content": "import Grasshopper as gh\nimport System.Drawing as sd\nimport Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\ncomp = ghenv.Component\nghdoc = comp.OnPingDocument()\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE, 10))\n\ndef create_mug_body(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a mug body. \n    The body is modeled as a cylinder.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the mug body plane\n        normal (Rhino.Geometry.Vector3d): normal of mug body plane \n        radius (float): the radius of the mug \n        height (float): the height of the mug\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the mug body\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the mug\n        base_circle = rg.Circle(plane, radius)\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = False\n        cap_top = False\n        mug = cylinder.ToBrep(cap_bottom, cap_top)\n        print(\"INFO: create_mug_body - return\", mug)\n        return mug\n    except Exception as error:\n        print(\"ERROR: create_mug_body \", traceback.format_exc())\n        return DEFAULT_BREP\n\ndef create_mug_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a mug base. \n    The base is modeled as a circle at the base of the mug.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the mug base plane\n        normal (Rhino.Geometry.Vector3d): normal of mug base plane \n        radius (float): the radius of the base\n\n    Return: \n        Rhino.Geometry.Circle: the created circle\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle\n        base_circle = rg.Circle(plane, radius)\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(),TOLERANCE)[0]\n        \n        print(\"INFO: create_mug_base - return\", base)\n        return base\n    except Exception as error:\n        print(\"ERROR: create_mug_base \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\ndef create_mug_handle(origin, normal, alignment, height, width, thickness):\n    \"\"\"\n    Create a 3D model of a mug handle\n    The handle is modeled as a slightly elongated semi-circle or crescent\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the handle - center of handle circle\n        normal (Rhino.Geometry.Vector3d): normal of handle plane - tangent of handle\n        alignmen (Rhino.Geometry.Vector3d): The direction to define the start and end point of the handle in relation to the origin\n        height (float): the height of the handle\n        width (float): The width of the handle\n        thickness (float): The thickness of the handle\n    \n    Returns:\n    Rhino.Geometry.Brep: The created semi cylinder\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_handle - start\", locals())\n        # Create semi circle\n        radius = width/2\n        handle_start_point = origin + (alignment * radius)\n        handle_end_point = origin - (alignment * radius)\n        semi_circle = rg.Arc(handle_start_point, normal, handle_end_point).ToNurbsCurve()\n        \n        # Scale the semi-circle to create an elongated semi-circle or crescent\n        plane = rg.Plane(origin,normal)\n        transform = rg.Transform.Scale(plane, 1, height/radius, 1)\n        semi_circle.Transform(transform)\n        \n        # Create a circle at the start of the semi-circle for the thickness\n        start_point_plane = rg.Plane(semi_circle.PointAtStart ,semi_circle.TangentAtStart)\n        shape_circle = rg.Circle(start_point_plane, thickness/2)\n        \n        # Sweep the shape circle along the semi-circle to create the handle\n        closed = False\n        handle = rg.Brep.CreateFromSweep(semi_circle, shape_circle.ToNurbsCurve(), closed , TOLERANCE)[0]\n        print(\"INFO: create_mug_handle - return\", handle)\n        return handle\n    except Exception as error:\n        print(\"ERROR: create_mug_handle \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\ndef AddParam(name, IO):\n    assert IO in ('Output', 'Input')\n    params = [param.NickName for param in getattr(ghenv.Component.Params,IO)]\n    if name not in params:\n        param = gh.Kernel.Parameters.Param_GenericObject()\n        param.NickName = name\n        param.Name = name\n        param.Description = name\n        param.Optional = True\n        index = getattr(ghenv.Component.Params, IO).Count\n        registers = dict(Input  = 'RegisterInputParam'\n                        ,Output = 'RegisterOutputParam')\n        getattr(ghenv.Component.Params,registers[IO])(param, index)\n        ghenv.Component.Params.OnParametersChanged()\n        return param\n    return None              \n\ndef AddSlider(min, max, value, target, index):\n    slider = gh.Kernel.Special.GH_NumberSlider()\n    slider.Slider.Maximum = max\n    slider.Slider.Minimum = min\n    slider.Slider.Value = value\n    slider.Slider.DecimalPlaces = 1\n    ghdoc.AddObject(slider,False,ghdoc.ObjectCount+1)\n    #set the slider location\n    thisBounds = ghenv.Component.Attributes.Bounds\n    slider.Attributes.Pivot = sd.PointF(thisBounds.X-thisBounds.Width-100,thisBounds.Y + 20 + (25*index))\n    target.AddSource(slider)\n\nclass InputSlider():\n    def __init__(self, name, value, min, max):\n        self.name = name\n        self.value = value\n        self.min = min\n        self.max = max\n\ndef create_params():\n    input_list = [\n        InputSlider('body_radius', 50, 10, 300),\n        InputSlider('body_height', 100, 10, 300),\n        InputSlider('handle_height', 70, 10, 300),\n        InputSlider('handle_width', 30, 10, 300),\n        InputSlider('handle_thickness', 10, 5, 25),\n        InputSlider('handle_relative_height', 0.5, 0.1, 0.9),\n        ]\n    for i, input_ in enumerate(input_list):\n        param = AddParam(input_.name, 'Input')\n        if(param):\n            AddSlider(input_.min, input_.max, input_.value, param, i)\n\ncreate_params()\n\n# User Parameters:\ntry: body_radius\nexcept: body_radius = 50\n\ntry: body_height\nexcept: body_height = 100\n\ntry: handle_height\nexcept: handle_height = 70\n\ntry: handle_width\nexcept: handle_width = 30\n\ntry: handle_thickness\nexcept: handle_thickness = 10\n\ntry: handle_relative_height\nexcept: handle_relative_height = 0.5\n\n\n# Internal Parameters:\nbody_origin = rg.Point3d(0,0,0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\nhandle_alignment = body_normal.ZAxis\nhandle_origin = rg.Point3d(body_radius,0, body_height * handle_relative_height)\nhandle_normal = body_normal.XAxis\n\n# Assembling\nmug_body = create_mug_body(body_origin, body_normal, body_radius, body_height)\nmug_base = create_mug_base(base_origin, base_normal, base_radius)\nmug_handle = create_mug_handle(handle_origin, handle_normal, handle_alignment, handle_height, handle_width, handle_thickness)\n\n# Return created object by placing it in variable a\na = [mug_body,mug_base,mug_handle]"}]}
{"messages": [{"role": "system", "content": "Your role is to create full program out of several parts.\nThe united output should be in as array parameter a.\nStructure of full program:\n- All imports\n- Constant parameters\n- All functions of the different parts include implementation\n- List of parameters from all the parts\n- calling every function of each part\n- and eventually all the part in array named 'a':\na = [part1, part2, ....]"}, {"role": "user", "content": "Object: A Cooking pot\n\npart 1\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\n\ndef create_pot_lid_handle(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a pot lid handle. \n    The handle is modeled as a semi-sphere.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot lid handle plane\n        normal (Rhino.Geometry.Vector3d): normal of pot lid handle plane \n        radius (float): the radius of the semi-sphere\n\n    Return: \n    Rhino.Geometry.Brep: 3D model of the handle\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_lid_handle - start\", locals())\n        # Create plane to locate the handle\n        plane = rg.Plane(origin, normal)\n\n        # Create the sphere\n        sphere = rg.Sphere(plane, radius)\n        brep_sphere = rg.Brep.CreateFromSphere(sphere)\n\n        # Create a cutting brep\n        interval = rg.Interval(-radius, radius)\n        cutting_brep = rg.PlaneSurface(plane, interval, interval).ToBrep()\n        split_breps = brep_sphere.Split(cutting_brep, TOLERANCE)\n        semi_sphere = [brep for brep in split_breps if brep.IsValid][0]\n\n        print(\"INFO: create_pot_lid_handle - return\", brep_sphere)\n        return semi_sphere\n    except Exception as error:\n        print(\"ERROR: create_pot_lid_handle \",\n              \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nbody_radius = 150\nbody_height = 130\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nrim_external_radius = body_radius\nrim_thickness = 10\n\nlid_radius = rim_external_radius - rim_thickness + 5\nlid_height = 30\nlid_origin = rg.Point3d(0, 0, body_height)\nlid_normal = body_normal\n\nlid_handle_radius = 10\nlid_handle_origin = rg.Point3d(0, 0, body_height+lid_height)\nlid_handle_normal = rg.Vector3d(lid_normal)\n\n# Assembling\npot_lid_handle = create_pot_lid_handle(lid_handle_origin, lid_normal, lid_handle_radius)\n\n# Return created object by placing it in variable a\na = pot_lid_handle\n\n\npart 2\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_pot_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a pot base. \n    The base is modeled as a circle at the base of the pot.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot base plane\n        normal (Rhino.Geometry.Vector3d): normal of pot base plane \n        radius (float): the radius of the base\n\n    Return: \n        Rhino.Geometry.Circle: the created circle\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle\n        base_circle = rg.Circle(plane, radius)\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(),TOLERANCE)\n        \n        print(\"INFO: create_pot_base - return\", base)\n        return base\n    except Exception as error:\n        print(\"ERROR: create_pot_base \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nbody_radius = 150\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\n# Assembling\npot_base = create_pot_base(base_origin, base_normal, base_radius)\n\n# Return created object by placing it in variable a\na = pot_base\n\npart 3\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_pot_body(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a cooking pot body. \n    The body is modeled as a cylinder.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot body plane\n        normal (Rhino.Geometry.Vector3d): normal of pot body plane \n        radius (float): the radius of the pot \n        height (float): the height of the pot\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the pot body\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the pot\n        base_circle = rg.Circle(plane, radius)\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = False\n        cap_top = False\n        pot = cylinder.ToBrep(cap_bottom, cap_top)\n        print(\"INFO: create_pot_body - return\", pot)\n        return pot\n    except Exception as error:\n        print(\"ERROR: create_pot_body \", traceback.format_exc())\n        return DEFAULT_BREP\n\n# Parameters\nbody_radius = 150\nbody_height = 130\nbody_origin = rg.Point3d(0,0,0)\nbody_normal = rg.Vector3d.ZAxis\n\n# Assembling\npot_body = create_pot_body(body_origin, body_normal, body_radius, body_height)\n\n# Return created object by placing it in variable a\na = pot_body\n\npart 4\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_pot_handle(origin, normal, alignment, length, width, thickness):\n    \"\"\"\n    Create a 3D model of a pot handle\n    The handle is modeled as a slightly elongated semi-circle or crescent\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the hendle - center of handle circle\n        normal (Rhino.Geometry.Vector3d): normal of handle plane - tangent of handle\n        alignmen (Rhino.Geometry.Vector3d): The direction to define the start and end point of the handle in relation to the origin\n        length (float): the length of the handle\n        width (float): The width of the handle\n        thickness (float): The thickness of the handle\n    \n    Returns:\n    Rhino.Geometry.Brep: The created semi cylinder\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_handle - start\", locals())\n        # Create semi circle\n        radius = length/2\n        handle_start_point = origin + (alignment * radius)\n        handle_end_point = origin - (alignment * radius)\n        semi_circle = rg.Arc(handle_start_point, normal, handle_end_point).ToNurbsCurve()\n        \n        # Scale the semi-circle to create an elongated semi-circle or crescent\n        plane = rg.Plane(origin,normal)\n        transform = rg.Transform.Scale(plane, 1, 1, width/radius)\n        semi_circle.Transform(transform)\n        \n        # Create a circle at the start of the semi-circle for the thickness\n        start_point_plane = rg.Plane(semi_circle.PointAtStart ,semi_circle.TangentAtStart)\n        shape_circle = rg.Circle(start_point_plane, thickness/2)\n        \n        # Sweep the shape circle along the semi-circle to create the handle\n        closed = False\n        handle = rg.Brep.CreateFromSweep(semi_circle, shape_circle.ToNurbsCurve(), closed , TOLERANCE)[0]\n        print(\"INFO: create_pot_handle - return\", handle)\n        return handle\n    except Exception as error:\n        print(\"ERROR: create_pot_handle \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nbody_radius = 150\nbody_height = 130\nbody_origin = rg.Point3d(0,0,0)\nbody_normal = rg.Vector3d.ZAxis\n\nhandle_length = 100\nhandle_width = 30\nhandle_thickness = 20\nhandle_relative_height = 0.9\nhandle_alignment = body_normal.YAxis\nright_handle_origin = rg.Point3d(body_radius,0, body_height * handle_relative_height)\nright_handle_normal = body_normal.XAxis\nleft_handle_origin = rg.Point3d(-body_radius,0, body_height * handle_relative_height)\nleft_handle_normal = -body_normal.XAxis\n\n# Assembling\npot_right_handle = create_pot_handle(right_handle_origin, right_handle_normal, handle_alignment, handle_length, handle_width, handle_thickness)\npot_left_handle = create_pot_handle(left_handle_origin, left_handle_normal, handle_alignment, handle_length, handle_width, handle_thickness)\n\n# Return created object by placing it in variable a\na = pot_right_handle, pot_left_handle\n\npart 5\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_pot_lid(origin, normal, radius, height, handle_radius):\n    \"\"\"\n    This function creates a 3D model of a pot lid. \n    The lid is modeled as a slightly domed circular piece.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot lid plane\n        normal (Rhino.Geometry.Vector3d): normal of pot lid plane \n        radius (float): the radius of the lid \n        height (float): the height of the lid\n        handle_radius (float): the radius of the lid handle\n    \n    Return: \n    Rhino.Geometry.Brep: 3D model of the lid\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_lid - start\", locals())\n        # Create plane to locate the lid\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the lid\n        base_circle = rg.Circle(plane, radius)\n        \n        # Create the top circle at the top of the lid\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, handle_radius)\n        \n        # Create the lid by lofting the two circles\n        closed = False\n        lid = rg.Brep.CreateFromLoft([base_circle.ToNurbsCurve(), top_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        \n        print(\"INFO: create_kettle_lid - return\", lid)\n        return lid\n    except Exception as error:\n        print(\"ERROR: create_kettle_lid \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nbody_radius = 150\nbody_height = 130\nbody_origin = rg.Point3d(0,0,0)\nbody_normal = rg.Vector3d.ZAxis\n\nrim_external_radius = body_radius\nrim_thickness = 10\n\nlid_handle_radius = 10\n\nlid_radius = rim_external_radius - rim_thickness + 5\nlid_height = 30\nlid_origin = rg.Point3d(0,0,body_height)\nlid_normal = body_normal\n\n\n# Assembling\npot_lid = create_pot_lid(lid_origin, lid_normal, lid_radius, lid_height, lid_handle_radius)\n\n# Return created object by placing it in variable a\na = pot_lid\n\npart 6\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = 0.01\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_pot_rim(origin, normal, external_radius, thickness):\n    \"\"\"\n    This function creates a 3D model of a pot rim. \n    The rim is modeled as a torus.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot rim plane\n        normal (Rhino.Geometry.Vector3d): normal of pot rim plane \n        external_radius (float): the external radius of the torus\n        thickness (float): the thickness of the torus\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the rim\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_rim - start\", locals())\n        # Create plane to locate the rim\n        plane = rg.Plane(origin,normal)\n        \n        # Create the rim surface\n        external_circle = rg.Circle(plane,external_radius)\n        internal_radius = external_radius - thickness\n        internal_circle = rg.Circle(plane, internal_radius)\n        \n        # Create the lid by lofting the two circles\n        closed = False\n        rim = rg.Brep.CreateFromLoft([external_circle.ToNurbsCurve(), internal_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        \n        print(\"INFO: create_pot_rim - return\", rim)\n        return rim\n    except Exception as error:\n        print(\"ERROR: create_pot_rim \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nbody_radius = 150\nbody_height = 130\nbody_origin = rg.Point3d(0,0,0)\nbody_normal = rg.Vector3d.ZAxis\n\nrim_external_radius = body_radius\nrim_thickness = 10\nrim_origin = rg.Point3d(0,0,body_height)\nrim_normal = body_normal\n\n# Assembling\npot_rim = create_pot_rim(rim_origin, rim_normal, rim_external_radius, rim_thickness)\n\n# Return created object by placing it in variable a\na = pot_rim"}, {"role": "assistant", "content": "import Grasshopper as gh\nimport System.Drawing as sd\nimport Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\ncomp = ghenv.Component\nghdoc = comp.OnPingDocument()\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE, 10))\n\n\ndef create_pot_lid_handle(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a pot lid handle. \n    The handle is modeled as a semi-sphere.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot lid handle plane\n        normal (Rhino.Geometry.Vector3d): normal of pot lid handle plane \n        radius (float): the radius of the semi-sphere\n\n    Return: \n    Rhino.Geometry.Brep: 3D model of the handle\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_lid_handle - start\", locals())\n        # Create plane to locate the handle\n        plane = rg.Plane(origin, normal)\n\n        # Create the sphere\n        sphere = rg.Sphere(plane, radius)\n        brep_sphere = rg.Brep.CreateFromSphere(sphere)\n\n        # Create a cutting brep\n        interval = rg.Interval(-radius, radius)\n        cutting_brep = rg.PlaneSurface(plane, interval, interval).ToBrep()\n        split_breps = brep_sphere.Split(cutting_brep, TOLERANCE)\n        semi_sphere = [brep for brep in split_breps if brep.IsValid][0]\n\n        print(\"INFO: create_pot_lid_handle - return\", brep_sphere)\n        return semi_sphere\n    except Exception as error:\n        print(\"ERROR: create_pot_lid_handle \",\n              \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\ndef create_pot_base(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a pot base. \n    The base is modeled as a circle at the base of the pot.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot base plane\n        normal (Rhino.Geometry.Vector3d): normal of pot base plane \n        radius (float): the radius of the base\n\n    Return: \n        Rhino.Geometry.Circle: the created circle\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_base - start\", locals())\n        # Create plane to locate the base\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle\n        base_circle = rg.Circle(plane, radius)\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(), TOLERANCE)[0]\n\n        print(\"INFO: create_pot_base - return\", base)\n        return base\n    except Exception as error:\n        print(\"ERROR: create_pot_base \",\n              \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\ndef create_pot_body(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a cooking pot body. \n    The body is modeled as a cylinder.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot body plane\n        normal (Rhino.Geometry.Vector3d): normal of pot body plane \n        radius (float): the radius of the pot \n        height (float): the height of the pot\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the pot body\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle at the bottom of the pot\n        base_circle = rg.Circle(plane, radius)\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = False\n        cap_top = False\n        pot = cylinder.ToBrep(cap_bottom, cap_top)\n        print(\"INFO: create_pot_body - return\", pot)\n        return pot\n    except Exception as error:\n        print(\"ERROR: create_pot_body \", traceback.format_exc())\n        return DEFAULT_BREP\n\n\ndef create_pot_handle(origin, normal, alignment, length, width, thickness):\n    \"\"\"\n    Create a 3D model of a pot handle\n    The handle is modeled as a slightly elongated semi-circle or crescent\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the handle - center of handle circle\n        normal (Rhino.Geometry.Vector3d): normal of handle plane - tangent of handle\n        alignmen (Rhino.Geometry.Vector3d): The direction to define the start and end point of the handle in relation to the origin\n        length (float): the length of the handle\n        width (float): The width of the handle\n        thickness (float): The thickness of the handle\n    \n    Returns:\n    Rhino.Geometry.Brep: The created semi cylinder\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_handle - start\", locals())\n        # Create semi circle\n        radius = length/2\n        handle_start_point = origin + (alignment * radius)\n        handle_end_point = origin - (alignment * radius)\n        semi_circle = rg.Arc(handle_start_point, normal, handle_end_point).ToNurbsCurve()\n        \n        # Scale the semi-circle to create an elongated semi-circle or crescent\n        plane = rg.Plane(origin,normal)\n        transform = rg.Transform.Scale(plane, 1, 1, width/radius)\n        semi_circle.Transform(transform)\n        \n        # Create a circle at the start of the semi-circle for the thickness\n        start_point_plane = rg.Plane(semi_circle.PointAtStart ,semi_circle.TangentAtStart)\n        shape_circle = rg.Circle(start_point_plane, thickness/2)\n        \n        # Sweep the shape circle along the semi-circle to create the handle\n        closed = False\n        handle = rg.Brep.CreateFromSweep(semi_circle, shape_circle.ToNurbsCurve(), closed , TOLERANCE)[0]\n        print(\"INFO: create_pot_handle - return\", handle)\n        return handle\n    except Exception as error:\n        print(\"ERROR: create_pot_handle \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\ndef create_pot_lid(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a pot lid. \n    The lid is modeled as a slightly domed circular piece.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot lid plane\n        normal (Rhino.Geometry.Vector3d): normal of pot lid plane \n        radius (float): the radius of the lid \n        height (float): the height of the lid\n    \n    Return: \n    Rhino.Geometry.Brep: 3D model of the lid\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_lid - start\", locals())\n        # Create plane to locate the lid\n        plane = rg.Plane(origin, normal)\n        \n        # Create the base circle at the bottom of the lid\n        base_circle = rg.Circle(plane, radius)\n        \n        # Create the top circle at the top of the lid\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, radius * 0.1)\n        \n        # Create the lid by lofting the two circles\n        closed = False\n        lid = rg.Brep.CreateFromLoft([base_circle.ToNurbsCurve(), top_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        \n        print(\"INFO: create_kettle_lid - return\", lid)\n        return lid\n    except Exception as error:\n        print(\"ERROR: create_kettle_lid \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\ndef create_pot_rim(origin, normal, external_radius, thickness):\n    \"\"\"\n    This function creates a 3D model of a pot rim. \n    The rim is modeled as a torus.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot rim plane\n        normal (Rhino.Geometry.Vector3d): normal of pot rim plane \n        external_radius (float): the external radius of the torus\n        thickness (float): the thickness of the torus\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the rim\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_rim - start\", locals())\n        # Create plane to locate the rim\n        plane = rg.Plane(origin, normal)\n        \n        # Create the rim surface\n        external_circle = rg.Circle(plane, external_radius)\n        internal_radius = external_radius - thickness\n        internal_circle = rg.Circle(plane, internal_radius)\n        \n        # Create the lid by lofting the two circles\n        closed = False\n        rim = rg.Brep.CreateFromLoft([external_circle.ToNurbsCurve(), internal_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        \n        print(\"INFO: create_pot_rim - return\", rim)\n        return rim\n    except Exception as error:\n        print(\"ERROR: create_pot_rim \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\ndef AddParam(name, IO):\n    assert IO in ('Output', 'Input')\n    params = [param.NickName for param in getattr(ghenv.Component.Params, IO)]\n    if name not in params:\n        param = gh.Kernel.Parameters.Param_GenericObject()\n        param.NickName = name\n        param.Name = name\n        param.Description = name\n        param.Optional = True\n        index = getattr(ghenv.Component.Params, IO).Count\n        registers = dict(Input='RegisterInputParam', Output='RegisterOutputParam')\n        getattr(ghenv.Component.Params, registers[IO])(param, index)\n        ghenv.Component.Params.OnParametersChanged()\n        return param\n    return None\n\n\ndef AddSlider(min, max, value, target, index):\n    slider = gh.Kernel.Special.GH_NumberSlider()\n    slider.Slider.Maximum = max\n    slider.Slider.Minimum = min\n    slider.Slider.Value = value\n    slider.Slider.DecimalPlaces = 1\n    ghdoc.AddObject(slider, False, ghdoc.ObjectCount + 1)\n    # set the slider location\n    thisBounds = ghenv.Component.Attributes.Bounds\n    slider.Attributes.Pivot = sd.PointF(\n        thisBounds.X-thisBounds.Width-100, thisBounds.Y + 20 + (25*index))\n    target.AddSource(slider)\n\n\nclass InputSlider():\n    def __init__(self, name, value, min, max):\n        self.name = name\n        self.value = value\n        self.min = min\n        self.max = max\n\n\ndef create_params():\n    input_list = [\n        InputSlider('body_radius', 150, 10, 300),\n        InputSlider('body_height', 130, 10, 300),\n        InputSlider('rim_thickness', 10, 1, 50),\n        InputSlider('lid_height', 30, 10, 100),\n        InputSlider('lid_handle_radius', 10, 5, 50),\n        InputSlider('handle_length', 100, 10, 300),\n        InputSlider('handle_width', 30, 10, 200),\n        InputSlider('handle_thickness', 20, 5, 50),\n        InputSlider('handle_relative_height', 0.9, 0, 1)\n    ]\n    for i, input_ in enumerate(input_list):\n        param = AddParam(input_.name, 'Input')\n        if(param):\n            AddSlider(input_.min, input_.max, input_.value, param, i)\n\n\ncreate_params()\n\n# User Parameters:\ntry: body_radius\nexcept: body_radius = 150\n\ntry: body_height\nexcept: body_height = 130\n\ntry: rim_thickness\nexcept: rim_thickness = 10\n\ntry: lid_height\nexcept: lid_height = 30\n\ntry: lid_handle_radius\nexcept: lid_handle_radius = 10\n\ntry: handle_length\nexcept: handle_length = 100\n\ntry: handle_width\nexcept: handle_width = 30\n\ntry: handle_thickness\nexcept: handle_thickness = 20\n\ntry: handle_relative_height\nexcept: handle_relative_height = 0.9\n\n\n# Internal Parameters:\nbody_origin = rg.Point3d(0, 0, 0)\nbody_normal = rg.Vector3d.ZAxis\n\nbase_radius = body_radius\nbase_origin = body_origin\nbase_normal = body_normal\n\nrim_external_radius = body_radius\nrim_origin = rg.Point3d(0, 0, body_height)\nrim_normal = body_normal\n\nlid_radius = rim_external_radius - rim_thickness + 5\nlid_origin = rg.Point3d(0, 0, body_height)\nlid_normal = body_normal\n\nlid_handle_origin = rg.Point3d(0, 0, body_height+lid_height)\nlid_handle_normal = rg.Vector3d(lid_normal)\n\nhandle_alignment = body_normal.YAxis\nright_handle_origin = rg.Point3d(body_radius,0, body_height * handle_relative_height)\nright_handle_normal = body_normal.XAxis\nleft_handle_origin = rg.Point3d(-body_radius,0, body_height * handle_relative_height)\nleft_handle_normal = -body_normal.XAxis\n\n# Assembling\npot_body = create_pot_body(body_origin, body_normal, body_radius, body_height)\npot_base = create_pot_base(base_origin, base_normal, base_radius)\npot_rim = create_pot_rim(rim_origin, rim_normal, rim_external_radius, rim_thickness)\npot_lid = create_pot_lid(lid_origin, lid_normal, lid_radius, lid_height)\npot_lid_handle = create_pot_lid_handle(lid_handle_origin, lid_handle_normal, lid_handle_radius)\nright_pot_handle = create_pot_handle(right_handle_origin, right_handle_normal, handle_alignment, handle_length, handle_width, handle_thickness)\nleft_pot_handle = create_pot_handle(left_handle_origin, left_handle_normal, handle_alignment, handle_length, handle_width, handle_thickness)\n\n# Return created object by placing it in variable a\na = [pot_base, pot_body, pot_lid, pot_rim, pot_lid_handle, right_pot_handle, left_pot_handle]"}]}
