{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A Cooking pot\nPot Body: A hemisphere or cylindrical shape with a flat bottom.\nParameters: pot_height=130, pot_radius=150\nOrientation: pot_origin=(0,0,0), pot_normal=ZAxis"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_pot_body(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a cooking pot body. \n    The body is modeled as a cylinder with a flat bottom.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot body plane\n        normal (Rhino.Geometry.Vector3d): normal of pot body plane \n        radius (float): the radius of the pot \n        height (float): the height of the pot\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the pot body\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the pot\n        base_circle = rg.Circle(plane, radius)\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = True\n        cap_top = False\n        pot = cylinder.ToBrep(cap_bottom, cap_top)\n        print(\"INFO: create_pot_body - return\", pot)\n        return pot\n    except Exception as error:\n        print(\"ERROR: create_pot_body \", traceback.format_exc())\n        return DEFAULT_BREP\n\n# Parameters\npot_radius = 150\npot_height = 130\npot_origin = rg.Point3d(0,0,0)\npot_normal = rg.Vector3d.ZAxis\n\n# Assembling\npot_body = create_pot_body(pot_origin, pot_normal, pot_radius, pot_height)\n\n# Return created object by placing it in variable a\na = pot_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A Cooking pot\nPot Handles: A pair of horizontal semi-circular shapes, attached horizontally on opposite sides of the pot body.\nParameters: handle_length=100, handle_width=30, handle_thickness=20, handle_relative_height=0.9\nAlignment: YAxis (Horizontal)\nRight Handle Orientation: right_handle_origin=(pot_radius,0, pot_height*handle_relative_height), right_handle_normal=XAxis\nLeft Handle Orientation: left_handle_origin=(-pot_radius,0, pot_height*handle_relative_height), left_handle_normal=-XAxis"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_pot_handle(origin, normal, alignment, length, width, thickness):\n    \"\"\"\n    Create a 3D model of a pot handle\n    The handle is modeled as a slightly elongated semi-circle or crescent\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the hendle - center of handle circle\n        normal (Rhino.Geometry.Vector3d): normal of handle plane - tangent of handle\n        alignmen (Rhino.Geometry.Vector3d): The direction to define the start and end point of the handle in relation to the origin\n        length (float): the length of the handle\n        width (float): The width of the handle\n        thickness (float): The thickness of the handle\n    \n    Returns:\n    Rhino.Geometry.Brep: The created semi cylinder\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_handle - start\", locals())\n        # Create semi circle\n        radius = length/2\n        handle_start_point = origin + (alignment * radius)\n        handle_end_point = origin - (alignment * radius)\n        semi_circle = rg.Arc(handle_start_point, normal, handle_end_point).ToNurbsCurve()\n        \n        # Scale the semi-circle to create an elongated semi-circle or crescent\n        plane = rg.Plane(origin,normal)\n        transform = rg.Transform.Scale(plane, 1, 1, width/radius)\n        semi_circle.Transform(transform)\n        \n        # Create a circle at the start of the semi-circle for the thickness\n        start_point_plane = rg.Plane(semi_circle.PointAtStart ,semi_circle.TangentAtStart)\n        shape_circle = rg.Circle(start_point_plane, thickness/2)\n        \n        # Sweep the shape circle along the semi-circle to create the handle\n        closed = False\n        handle = rg.Brep.CreateFromSweep(semi_circle, shape_circle.ToNurbsCurve(), closed , TOLERANCE)[0]\n        print(\"INFO: create_pot_handle - return\", handle)\n        return handle\n    except Exception as error:\n        print(\"ERROR: create_pot_handle \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\npot_radius = 150\npot_height = 130\npot_origin = rg.Point3d(0,0,0)\npot_normal = rg.Vector3d.ZAxis\n\nhandle_length = 100\nhandle_width = 30\nhandle_thickness = 20\nhandle_relative_height = 0.9\nhandle_alignment = rg.Vector3d(pot_normal.YAxis)\nright_handle_origin = rg.Point3d(pot_radius,0, pot_height * handle_relative_height)\nright_handle_normal = rg.Vector3d(pot_normal.XAxis)\nleft_handle_origin = rg.Point3d(-pot_radius,0, pot_height * handle_relative_height)\nleft_handle_normal = rg.Vector3d(-pot_normal.XAxis)\n\n# Assembling\npot_right_handle = create_pot_handle(right_handle_origin, right_handle_normal, handle_alignment, handle_length, handle_width, handle_thickness)\npot_left_handle = create_pot_handle(left_handle_origin, left_handle_normal, handle_alignment, handle_length, handle_width, handle_thickness)\n\n# Return created object by placing it in variable a\na = pot_right_handle, pot_left_handle"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A Cooking pot\nPot Rim: A circular, slightly protruding edge at the top of the pot, often designed to support the lid.\nParameters: rim_external_radius=pot_radius, rim_tickness=10\nOrientation: rim_origin=(0,0,pot_height), rim_normal=pot_normal"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_pot_rim(origin, normal, external_radius, thickness):\n    \"\"\"\n    This function creates a 3D model of a pot rim. \n    The rim is modeled as a torus.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot rim plane\n        normal (Rhino.Geometry.Vector3d): normal of pot rim plane \n        external_radius (float): the external radius of the torus\n        thickness (float): the thickness of the torus\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the rim\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_rim - start\", locals())\n        # Create plane to locate the rim\n        plane = rg.Plane(origin,normal)\n        \n        # Create the rim surface\n        external_circle = rg.Circle(plane,external_radius)\n        internal_radius = external_radius - thickness\n        internal_circle = rg.Circle(plane, internal_radius)\n        \n        # Create the lid by lofting the two circles\n        closed = False\n        rim = rg.Brep.CreateFromLoft([external_circle.ToNurbsCurve(), internal_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        \n        print(\"INFO: create_pot_rim - return\", rim)\n        return rim\n    except Exception as error:\n        print(\"ERROR: create_pot_rim \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\npot_radius = 150\npot_height = 130\npot_origin = rg.Point3d(0,0,0)\npot_normal = rg.Vector3d.ZAxis\n\nrim_external_radius = pot_radius\nrim_thickness = 10\nrim_origin = rg.Point3d(0,0,pot_height)\nrim_normal = rg.Vector3d(pot_normal)\n\n# Assembling\npot_rim = create_pot_rim(rim_origin, rim_normal, rim_external_radius, rim_thickness)\n\n# Return created object by placing it in variable a\na = pot_rim"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A Cooking pot\nPot Lid: A flat circular disk or semi-spherical shape on the top of the body. A little bit larger than rim internal ring\nParameters: lid_radius=rim_external_radius-rim_thickness+5, lid_height\nOrientation: lid_origin=(0,0,pot_height), lid_normal=pot_normal"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_pot_lid(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a pot lid. \n    The lid is modeled as a slightly domed circular piece.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot lid plane\n        normal (Rhino.Geometry.Vector3d): normal of pot lid plane \n        radius (float): the radius of the lid \n        height (float): the height of the lid\n    \n    Return: \n    Rhino.Geometry.Brep: 3D model of the lid\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_lid - start\", locals())\n        # Create plane to locate the lid\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the lid\n        base_circle = rg.Circle(plane, radius)\n        \n        # Create the top circle at the top of the lid\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, radius * 0.1)\n        \n        # Create the lid by lofting the two circles\n        closed = False\n        lid = rg.Brep.CreateFromLoft([base_circle.ToNurbsCurve(), top_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        \n        print(\"INFO: create_kettle_lid - return\", lid)\n        return lid\n    except Exception as error:\n        print(\"ERROR: create_kettle_lid \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\npot_radius = 150\npot_height = 130\npot_origin = rg.Point3d(0,0,0)\npot_normal = rg.Vector3d.ZAxis\n\nrim_external_radius = pot_radius\nrim_thickness = 10\n\nlid_radius = rim_external_radius - rim_thickness + 5\nlid_height = 30\nlid_origin = rg.Point3d(0,0,pot_height)\nlid_normal = rg.Vector3d(pot_normal)\n\n\n# Assembling\npot_lid = create_pot_lid(lid_origin, lid_normal, lid_radius, lid_height)\n\n# Return created object by placing it in variable a\na = pot_lid"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A Cooking pot\nLid Handle: A small semi-sphere that sits on the top center of the lid.\nParameters: lid_handle_radius=lid_radius*0.1\nOrientation: lid_handle_origin=(0,0,pot_height+lid_height), lid_handle_normal=pot_normal"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE, 10))\n\n\ndef create_pot_lid_handle(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a pot lid handle. \n    The handle is modeled as a semi-sphere.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the pot lid handle plane\n        normal (Rhino.Geometry.Vector3d): normal of pot lid handle plane \n        radius (float): the radius of the semi-sphere\n\n    Return: \n    Rhino.Geometry.Brep: 3D model of the handle\n    \"\"\"\n    try:\n        print(\"INFO: create_pot_lid_handle - start\", locals())\n        # Create plane to locate the handle\n        plane = rg.Plane(origin, normal)\n\n        # Create the sphere\n        sphere = rg.Sphere(plane, radius)\n        brep_sphere = rg.Brep.CreateFromSphere(sphere)\n\n        # Create a cutting brep\n        interval = rg.Interval(-radius, radius)\n        cutting_brep = rg.PlaneSurface(plane, interval, interval).ToBrep()\n        split_breps = brep_sphere.Split(cutting_brep, TOLERANCE)\n        semi_sphere = [brep for brep in split_breps if brep.IsValid][0]\n\n        print(\"INFO: create_pot_lid_handle - return\", brep_sphere)\n        return semi_sphere\n    except Exception as error:\n        print(\"ERROR: create_pot_lid_handle \",\n              \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\npot_radius = 150\npot_height = 130\npot_origin = rg.Point3d(0, 0, 0)\npot_normal = rg.Vector3d.ZAxis\n\nrim_external_radius = pot_radius\nrim_thickness = 10\n\nlid_radius = rim_external_radius - rim_thickness + 5\nlid_height = 30\nlid_origin = rg.Point3d(0, 0, pot_height)\nlid_normal = rg.Vector3d(pot_normal)\n\nlid_handle_radius = lid_radius * 0.1\nlid_handle_origin = rg.Point3d(0, 0, pot_height+lid_height)\nlid_handle_normal = rg.Vector3d(lid_normal)\n\n# Assembling\npot_lid_handle = create_pot_lid_handle(\n    lid_handle_origin, lid_normal, lid_handle_radius)\n\n# Return created object by placing it in variable a\na = pot_lid_handle\n"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A bowl\nBowl Body: A hemisphere or a truncated cone shape.\nParameters: bowl_height=90, bowl_bottom_radius=30, bowl_middle_radius=110, bowl_upper_radius=140\nOrientation: bowl_origin=(0,0,0), bowl_normal=ZAxis"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE, 10))\n\n\ndef create_bowl_body(origin, normal, bottom_radius, middle_radius, upper_radius, height):\n    \"\"\"\n    This function creates a 3D model of a bowl body. \n    The body is modeled as a truncated cone.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the bowl body plane\n        normal (Rhino.Geometry.Vector3d): normal of bowl body plane \n        bottom_radius (float): the radius of the bottom of the bowl \n        middle_radius (float): the radius of the middle part of the bowl\n        upper_radius (float): the radius of the upper part of the bowl\n        height (float): the height of the bowl\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the bowl body\n    \"\"\"\n    try:\n        print(\"INFO: create_bowl_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the base circle at the bottom of the bowl\n        base_circle = rg.Circle(plane, bottom_radius)\n\n        # Create the top circle at the middle of the bowl\n        mid_plane = rg.Plane(plane)\n        mid_plane.Translate(plane.Normal*height*0.5)\n        mid_circle = rg.Circle(mid_plane, middle_radius)\n\n        # Create the top circle at the top of the bowl\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, upper_radius)\n\n        # Create the bowl by lofting the two circles\n        closed = False\n        loft = rg.Brep.CreateFromLoft([base_circle.ToNurbsCurve(), mid_circle.ToNurbsCurve(\n        ), top_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)\n\n        # Create bowl base\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(), TOLERANCE)\n\n        # Join bowl parts\n        bowl = rg.Brep.JoinBreps(loft + base, TOLERANCE)[0]\n\n        print(\"INFO: create_bowl_body - return\", bowl)\n        return bowl\n    except Exception as error:\n        print(\"ERROR: create_bowl_body \",\n              \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nbowl_height = 90\nbowl_bottom_radius = 30\nbowl_middle_radius = 110\nbowl_upper_radius = 140\nbowl_origin = rg.Point3d(0, 0, 0)\nbowl_normal = rg.Vector3d.ZAxis\n\n# Assembling\nbowl_body = create_bowl_body(bowl_origin, bowl_normal, bowl_bottom_radius,\n                             bowl_middle_radius, bowl_upper_radius, bowl_height)\n\n# Return created object by placing it in variable a\na = bowl_body\n"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A kettle\nKettle Body: A hemisphere or a truncated cone shape with a flat bottom.\nParameters: kettle_height=200, kettle_bottom_radius=150, kettle_upper_radius=120\nOrientation: kettle_origin=(0,0,0), kettle_normal=ZAxis"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_kettle_body(origin, normal, bottom_radius, upper_radius, height):\n    \"\"\"\n    This function creates a 3D model of a kettle body. \n    The body is modeled as a truncated cone with a flat bottom.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the kettle body plane\n        normal (Rhino.Geometry.Vector3d): normal of kettle body plane \n        bottom_radius (float): the radius of the bottom of the kettle \n        upper_radius (float): the radius of the upper part of the kettle \n        height (float): the height of the kettle\n    \n    Return: \n    Rhino.Geometry.Brep: 3D model of the kettle body\n    \"\"\"\n    try:\n        print(\"INFO: create_kettle_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the kettle\n        base_circle = rg.Circle(plane, bottom_radius)\n        \n        # Create the top circle at the top of the kettle\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, upper_radius)\n        \n        # Create the kettle body by lofting the two circles\n        closed = False\n        loft = rg.Brep.CreateFromLoft([base_circle.ToNurbsCurve(), top_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)\n        \n        # Create kettle base\n        base = rg.Brep.CreatePlanarBreps(base_circle.ToNurbsCurve(),TOLERANCE)\n        \n        kettle = rg.Brep.JoinBreps(loft + base, TOLERANCE)[0]\n        \n        print(\"INFO: create_kettle_body - return\", kettle)\n        return kettle\n    except Exception as error:\n        print(\"ERROR: create_kettle_body \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n# Parameters\nkettle_bottom_radius = 150\nkettle_upper_radius = 120\nkettle_height = 200\nkettle_origin = rg.Point3d(0,0,0)\nkettle_normal = rg.Vector3d.ZAxis\n\n# Assembling\nkettle_body = create_kettle_body(kettle_origin, kettle_normal, kettle_bottom_radius, kettle_upper_radius, kettle_height)\n\n# Return created object by placing it in variable a\na = kettle_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A kettle\nKettle Spout: A cylindrical or conical shape, attached diagonally to the upper part on the side of the kettle body.\nParameters: spout_height=100, spout_bottom_radius=22, spout_upper_radius=13, spout_relative_height=0.6, spout_obliquity=2.2\nOrientation: spout_origin=(kettle_bottom_radius+(kettle_upper_radius-kettle_bottom_radius)\\_spout_relative_height,0,kettle_height*spout_relative_height), spout_normal=XAxis+ZAxis*spout_obliquity"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_kettle_spout(origin, normal, height, bottom_radius, upper_radius):\n    \"\"\"\n    This function creates a 3D model of a kettle spout. \n    The spout is modeled as a conical shape.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the kettle spout plane\n        normal (Rhino.Geometry.Vector3d): normal of kettle spout plane \n        height (float): the height of the spout \n        bottom_radius (float): the radius of the bottom of the spout\n        upper_radius (float): the radius of the top of the spout\n    \n    Return: \n    Rhino.Geometry.Brep: 3D model of the spout\n    \"\"\"\n    try:\n        print(\"INFO: create_kettle_spout - start\", locals())\n        # Create plane to locate the spout\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the spout\n        base_circle = rg.Circle(plane, bottom_radius)\n        \n        # Create the top circle at the top of the spout\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, upper_radius)\n        \n        # Create the spout by lofting the two circles\n        closed=False\n        spout = rg.Brep.CreateFromLoft([base_circle.ToNurbsCurve(), top_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        \n        print(\"INFO: create_kettle_spout - return\", spout)\n        return spout\n    except Exception as error:\n        print(\"ERROR: create_kettle_spout \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nkettle_bottom_radius = 150\nkettle_upper_radius = 120\nkettle_height = 200\nkettle_origin = rg.Point3d(0,0,0)\nkettle_normal = rg.Vector3d.ZAxis\n\nspout_height = 100\nspout_bottom_radius = 22\nspout_upper_radius = 13\nspout_relative_height = 0.6\nspout_obliquity = 2.2\nspout_origin = rg.Point3d(kettle_bottom_radius + (kettle_upper_radius-kettle_bottom_radius)*spout_relative_height,0,kettle_height * spout_relative_height)\nspout_normal = rg.Vector3d(kettle_normal.XAxis + kettle_normal.ZAxis*spout_obliquity)\n\n# Assembling\nkettle_spout = create_kettle_spout(spout_origin, spout_normal, spout_height, spout_bottom_radius, spout_upper_radius)\n\n# Return created object by placing it in variable a\na = kettle_spout"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A kettle\nKettle Rim: A circular, slightly protruding edge at the top of the kettle, often designed to support the lid.\nParameters: rim_external_radius=kettle_upper_radius, rim_tickness=35\nOrientation: rim_origin=(0,0,kettle_height), rim_normal=kettle_normal"}, {"role": "assistant", "content": "\nimport Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_kettle_rim(origin, normal, external_radius, thickness):\n    \"\"\"\n    This function creates a 3D model of a kettle rim. \n    The rim is modeled as a surface between 2 circles.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the kettle rim plane\n        normal (Rhino.Geometry.Vector3d): normal of kettle rim plane \n        external_radius (float): the external radius of the torus\n        thickness (float): the thickness of the torus\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the rim\n    \"\"\"\n    try:\n        print(\"INFO: create_kettle_rim - start\", locals())\n        # Create plane to locate the rim\n        plane = rg.Plane(origin,normal)\n        \n        # Create the rim surface\n        external_circle = rg.Circle(plane,external_radius)\n        internal_radius = external_radius - thickness\n        internal_circle = rg.Circle(plane, internal_radius)\n        \n        # Create the lid by lofting the two circles\n        closed = False\n        rim = rg.Brep.CreateFromLoft([external_circle.ToNurbsCurve(), internal_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        \n        print(\"INFO: create_kettle_rim - return\", rim)\n        return rim\n    except Exception as error:\n        print(\"ERROR: create_kettle_rim \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nkettle_bottom_radius = 150\nkettle_upper_radius = 120\nkettle_height = 200\nkettle_origin = rg.Point3d(0,0,0)\nkettle_normal = rg.Vector3d.ZAxis\n\nrim_external_radius = kettle_upper_radius\nrim_thickness = 35\nrim_origin = rg.Point3d(0,0,kettle_height)\nrim_normal = rg.Vector3d(kettle_normal)\n\n# Assembling\nkettle_rim = create_kettle_rim(rim_origin, rim_normal, rim_external_radius, rim_thickness)\n\n# Return created object by placing it in variable a\na = kettle_rim"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A kettle\nKettle Handle: A semi-circular or arc shape, attached horizontally on the top of the kettle body.\nParameters: handle_height=50, handle_thickness=20, handle_length=kettle_upper_radius\\*2-handle_thickness\nAlignment: XAxis (Horizontal)\nOrientation: handle_origin=(0,0,kettle_height), handle_normal=kettle_normal"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_kettle_handle(origin, normal, alignment, length, height, thickness):\n    \"\"\"\n    Create a 3D model of a kettle handle\n    The handle is modeled as a semi-circle or arc\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the handle - center of handle circle\n        normal (Rhino.Geometry.Vector3d): normal of handle plane - tangent of handle\n        alignmen (Rhino.Geometry.Vector3d): The direction to define the start and end point of the handle in relation to the origin\n        length (float): the length of the handle\n        height (float): The height of the handle\n        thickness (float): The thickness of the handle\n    \n    Returns:\n    Rhino.Geometry.Brep: The created semi cylinder\n    \"\"\"\n    try:\n        print(\"INFO: create_kettle_handle - start\", locals())\n        # Create semi circle\n        radius = length/2\n        handle_start_point = origin + (alignment * radius)\n        handle_end_point = origin - (alignment * radius)\n        semi_circle = rg.Arc(handle_start_point, normal, handle_end_point).ToNurbsCurve()\n        \n        # Scale the semi-circle to create an elongated semi-circle or crescent\n        plane = rg.Plane(origin,normal)\n        transform = rg.Transform.Scale(plane, 1, 1, height/radius)\n        semi_circle.Transform(transform)\n        \n        # Create a circle at the start of the semi-circle for the thickness\n        start_point_plane = rg.Plane(semi_circle.PointAtStart ,semi_circle.TangentAtStart)\n        shape_circle = rg.Circle(start_point_plane, thickness/2)\n        \n        # Sweep the shape circle along the semi-circle to create the handle\n        closed = False\n        handle = rg.Brep.CreateFromSweep(semi_circle, shape_circle.ToNurbsCurve(), closed , TOLERANCE)[0]\n        print(\"INFO: create_kettle_handle - return\", handle)\n        return handle\n    except Exception as error:\n        print(\"ERROR: create_kettle_handle \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nkettle_bottom_radius = 150\nkettle_upper_radius = 120\nkettle_height = 200\nkettle_normal = rg.Vector3d.ZAxis\n\n\nhandle_height = 50\nhandle_thickness = 20\nhandle_length = kettle_upper_radius * 2 - handle_thickness\nhandle_alignment = rg.Vector3d(kettle_normal.XAxis)\nhandle_origin = rg.Point3d(0,0,kettle_height)\nhandle_normal = rg.Vector3d(kettle_normal)\n\n# Assembling\nkettle_handle = create_kettle_handle(handle_origin, handle_normal, handle_alignment, handle_length, handle_height, handle_thickness)\n\n# Return created object by placing it in variable a\na = kettle_handle"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A kettle\nKettle Lid: A flat circular disk or semi-spherical shape on the top of the body, a little bit larger than rim internal ring\nParameters: lid_radius = rim_external_radius - rim_thickness + 5, lid_height=20\nOrientation: lid_origin=(0,0,kettle_height), lid_normal=kettle_normal"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_kettle_lid(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a kettle lid. \n    The lid is modeled as a slightly domed circular piece.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the kettle lid plane\n        normal (Rhino.Geometry.Vector3d): normal of kettle lid plane \n        radius (float): the radius of the lid \n        height (float): the height of the lid\n    \n    Return: \n    Rhino.Geometry.Brep: 3D model of the lid\n    \"\"\"\n    try:\n        print(\"INFO: create_kettle_lid - start\", locals())\n        # Create plane to locate the lid\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the lid\n        base_circle = rg.Circle(plane, radius)\n        \n        # Create the top circle at the top of the lid\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, radius * 0.1)\n        \n        # Create the lid by lofting the two circles\n        closed = False\n        lid = rg.Brep.CreateFromLoft([base_circle.ToNurbsCurve(), top_circle.ToNurbsCurve()], rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)[0]\n        \n        print(\"INFO: create_kettle_lid - return\", lid)\n        return lid\n    except Exception as error:\n        print(\"ERROR: create_kettle_lid \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nkettle_bottom_radius = 150\nkettle_upper_radius = 120\nkettle_height = 200\nkettle_normal = rg.Vector3d.ZAxis\n\nrim_external_radius = kettle_upper_radius\nrim_thickness = 35\n\nlid_radius = rim_external_radius - rim_thickness + 5\nlid_height = 20\nlid_origin = rg.Point3d(0,0,kettle_height)\nlid_normal = rg.Vector3d(kettle_normal)\n\n\n# Assembling\nkettle_lid = create_kettle_lid(lid_origin, lid_normal, lid_radius, lid_height)\n\n# Return created object by placing it in variable a\na = kettle_lid"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A kettle\nLid Handle: A small semi-sphere that sits on the top center of the lid.\nParameters: lid_handle_radius=lid_radius*0.1\nOrientation: lid_handle_origin=(0,0,kettle_height+lid_height), lid_handle_normal=lid_normal"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_kettle_lid_handle(origin, normal, radius):\n    \"\"\"\n    This function creates a 3D model of a kettle lid handle. \n    The handle is modeled as a semi-sphere.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the kettle lid handle plane\n        normal (Rhino.Geometry.Vector3d): normal of kettle lid handle plane \n        radius (float): the radius of the semi-sphere\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the handle\n    \"\"\"\n    try:\n        print(\"INFO: create_kettle_lid_handle - start\", locals())\n        # Create plane to locate the handle\n        plane = rg.Plane(origin,normal)\n        \n        # Create the sphere\n        sphere = rg.Sphere(plane, radius)\n        brep_sphere = rg.Brep.CreateFromSphere(sphere)\n        \n        # Create a cutting brep\n        interval = rg.Interval(-radius,radius)\n        cutting_brep = rg.PlaneSurface(plane,interval,interval).ToBrep()\n        split_breps = brep_sphere.Split(cutting_brep, TOLERANCE)\n        semi_sphere = [brep for brep in split_breps if brep.IsValid][0]\n        \n        print(\"INFO: create_kettle_lid_handle - return\", brep_sphere)\n        return semi_sphere\n    except Exception as error:\n        print(\"ERROR: create_kettle_lid_handle \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nkettle_bottom_radius = 150\nkettle_upper_radius = 120\nkettle_height = 200\nkettle_origin = rg.Point3d(0,0,0)\nkettle_normal = rg.Vector3d.ZAxis\n\nlid_radius = kettle_upper_radius\nlid_height = 20\nlid_origin = rg.Point3d(0,0,kettle_height)\nlid_normal = rg.Vector3d(kettle_normal)\n\nlid_handle_radius = lid_radius * 0.1\nlid_handle_origin = rg.Point3d(0,0,kettle_height+lid_height)\nlid_handle_normal = rg.Vector3d(lid_normal)\n\n# Assembling\nkettle_lid_handle = create_kettle_lid_handle(lid_handle_origin, lid_normal, lid_handle_radius)\n\n# Return created object by placing it in variable a\na = kettle_lid_handle"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A mug\nMug Body: A cylindrical shape with a flat bottom.\nParameters: mug_height=100, mug_radius=50\nOrientation: mug_origin=(0,0,0), mug_normal=ZAxis"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_mug_body(origin, normal, radius, height):\n    \"\"\"\n    This function creates a 3D model of a mug body. \n    The body is modeled as a cylinder with a flat bottom.\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the mug body plane\n        normal (Rhino.Geometry.Vector3d): normal of mug body plane \n        radius (float): the radius of the mug \n        height (float): the height of the mug\n    \n    Return: \n        Rhino.Geometry.Brep: 3D model of the mug body\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin,normal)\n        \n        # Create the base circle at the bottom of the mug\n        base_circle = rg.Circle(plane, radius)\n        cylinder = rg.Cylinder(base_circle, height)\n        cap_bottom = True\n        cap_top = False\n        mug = cylinder.ToBrep(cap_bottom, cap_top)\n        print(\"INFO: create_mug_body - return\", mug)\n        return mug\n    except Exception as error:\n        print(\"ERROR: create_mug_body \", traceback.format_exc())\n        return DEFAULT_BREP\n\n# Parameters\nmug_radius = 50\nmug_height = 100\nmug_origin = rg.Point3d(0,0,0)\nmug_normal = rg.Vector3d.ZAxis\n\n# Assembling\nmug_body = create_mug_body(mug_origin, mug_normal, mug_radius, mug_height)\n\n# Return created object by placing it in variable a\na = mug_body"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A mug\nMug Handle: A semi-circular shape, attached vertically on the side of the mug body.\nParameters: handle_height=70, handle_width=30, handle_thickness=10, handle_relative_height=0.5\nAlignment: ZAxis (Vertical)\nOrientation: handle_origin=(mug_radius,0, mug_height*handle_relative_height), handle_normal=XAxis"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE,10))\n\ndef create_mug_handle(origin, normal, alignment, height, width, thickness):\n    \"\"\"\n    Create a 3D model of a mug handle\n    The handle is modeled as a slightly elongated semi-circle or crescent\n    \n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the handle - center of handle circle\n        normal (Rhino.Geometry.Vector3d): normal of handle plane - tangent of handle\n        alignmen (Rhino.Geometry.Vector3d): The direction to define the start and end point of the handle in relation to the origin\n        height (float): the height of the handle\n        width (float): The width of the handle\n        thickness (float): The thickness of the handle\n    \n    Returns:\n    Rhino.Geometry.Brep: The created semi cylinder\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_handle - start\", locals())\n        # Create semi circle\n        radius = height/2\n        handle_start_point = origin + (alignment * radius)\n        handle_end_point = origin - (alignment * radius)\n        semi_circle = rg.Arc(handle_start_point, normal, handle_end_point).ToNurbsCurve()\n        \n        # Scale the semi-circle to create an elongated semi-circle or crescent\n        plane = rg.Plane(origin,normal)\n        transform = rg.Transform.Scale(plane, 1, width/radius, 1)\n        semi_circle.Transform(transform)\n        \n        # Create a circle at the start of the semi-circle for the thickness\n        start_point_plane = rg.Plane(semi_circle.PointAtStart ,semi_circle.TangentAtStart)\n        shape_circle = rg.Circle(start_point_plane, thickness/2)\n        \n        # Sweep the shape circle along the semi-circle to create the handle\n        closed = False\n        handle = rg.Brep.CreateFromSweep(semi_circle, shape_circle.ToNurbsCurve(), closed , TOLERANCE)[0]\n        print(\"INFO: create_mug_handle - return\", handle)\n        return handle\n    except Exception as error:\n        print(\"ERROR: create_mug_handle \", \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nmug_radius = 50\nmug_height = 100\nmug_origin = rg.Point3d(0,0,0)\nmug_normal = rg.Vector3d.ZAxis\n\nhandle_height = 70\nhandle_width = 30\nhandle_thickness = 10\nhandle_relative_height = 0.5\nhandle_alignment = rg.Vector3d(mug_normal.ZAxis)\nhandle_origin = rg.Point3d(mug_radius,0, mug_height * handle_relative_height)\nhandle_normal = rg.Vector3d(mug_normal.XAxis)\n\n# Assembling\nmug_handle = create_mug_handle(handle_origin, handle_normal, handle_alignment, handle_height, handle_width, handle_thickness)\n\n# Return created object by placing it in variable a\na = mug_handle"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A mug with rounded body with a narrow base and rim that expands toward the middle. The handle is large and C-shaped, providing a comfortable grip\nMug Body: A shape similar to a truncated cone, but with a curved surface that expands towards the middle and narrows at the base and the rim.\nParameters: mug_height=100, mug_base_radius=35, mug_middle_radius=60, mug_rim_radius=40\nOrientation: mug_origin=(0,0,0), mug_normal=ZAxis"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE, 10))\n\n\ndef create_mug_body(origin, normal, base_radius, middle_radius, rim_radius, height):\n    \"\"\"\n    This function creates a 3D model of a mug body. \n    The body is modeled as a truncated cone with a curved surface.\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the mug body plane\n        normal (Rhino.Geometry.Vector3d): normal of mug body plane \n        base_radius (float): the radius of the base of the mug \n        middle_radius (float): the radius of the middle of the mug \n        rim_radius (float): the radius of the rim of the mug \n        height (float): the height of the mug\n\n    Return: \n        Rhino.Geometry.Brep: 3D model of the mug body\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_body - start\", locals())\n        # Create plane to locate the body\n        plane = rg.Plane(origin, normal)\n\n        # Create the base, middle and top circles\n        base_circle = rg.Circle(plane, base_radius).ToNurbsCurve()\n        middle_plane = rg.Plane(plane)\n        middle_plane.Translate(plane.Normal*(height/2))\n        middle_circle = rg.Circle(middle_plane, middle_radius).ToNurbsCurve()\n        top_plane = rg.Plane(plane)\n        top_plane.Translate(plane.Normal*height)\n        top_circle = rg.Circle(top_plane, rim_radius).ToNurbsCurve()\n\n        # Create the body by lofting the three circles\n        closed = False\n        loft = rg.Brep.CreateFromLoft([base_circle, middle_circle, top_circle],\n                                      rg.Point3d.Unset, rg.Point3d.Unset, rg.LoftType.Normal, closed)\n\n        # Create base\n        base = rg.Brep.CreatePlanarBreps(base_circle, TOLERANCE)\n\n        # Join mug parts\n        mug = rg.Brep.JoinBreps(loft + base, TOLERANCE)[0]\n\n        print(\"INFO: create_mug_body - return\", mug)\n        return mug\n    except Exception as error:\n        print(\"ERROR: create_mug_body \",\n              \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nmug_height = 100\nmug_base_radius = 35\nmug_middle_radius = 60\nmug_rim_radius = 40\nmug_origin = rg.Point3d(0, 0, 0)\nmug_normal = rg.Vector3d.ZAxis\n\n# Assembling\nmug_body = create_mug_body(mug_origin, mug_normal, mug_base_radius,\n                           mug_middle_radius, mug_rim_radius, mug_height)\n\n# Return created object by placing it in variable a\na = mug_body\n"}]}
{"messages": [{"role": "system", "content": "You will provided with object name, name of part of the object, description of its 3D shape, parameters and orientation.\nWrite python grasshopper code to model the part as 3D object by its described shape.\n\nPython version 2.7\nRhino version 7"}, {"role": "user", "content": "A mug with rounded body with a narrow base and rim that expands toward the middle. The handle is large and C-shaped, providing a comfortable grip\nMug Handle: A large C-shaped structure, attached vertically on the side of the mug body.\nParameters: handle_height=60, handle_thickness=10, handle_relative_height=0.5, handle_relative_angle_at_start=0.6\nAlignment: ZAxis (Vertical)\nOrientation: handle_origin=(mug_middle_radius,0, mug_height*handle_relative_height), handle_normal=XAxis"}, {"role": "assistant", "content": "import Rhino\nimport Rhino.Geometry as rg\nimport traceback\n\nTOLERANCE = Rhino.RhinoDoc.ActiveDoc.ModelAbsoluteTolerance\n\nBASE_PLANE = rg.Plane.WorldXY\nDEFAULT_BREP = rg.Brep.CreateFromSphere(rg.Sphere(BASE_PLANE, 10))\n\n\ndef create_mug_handle(origin, normal, alignment, height, thickness, relative_angle_at_start):\n    \"\"\"\n    Create a 3D model of a mug handle\n    The handle is modeled as a C-shaped structure\n\n    Parameters:\n        origin (Rhino.Geometry.Point3d): origin of the handle - center of handle circle\n        normal (Rhino.Geometry.Vector3d): normal of handle plane - tangent of handle\n        alignmen (Rhino.Geometry.Vector3d): The direction to define the start and end point of the handle in relation to the origin\n        height (float): the height of the handle\n        relative_angle_at_start (float): handle start vector rotation upwards to create a C shape\n        thickness (float): The thickness of the handle\n\n    Returns:\n    Rhino.Geometry.Brep: The created semi cylinder\n    \"\"\"\n    try:\n        print(\"INFO: create_mug_handle - start\", locals())\n        # Create semi circle\n        radius = height/2\n        handle_start_point = origin + (alignment * radius)\n        handle_end_point = origin - (alignment * radius)\n        start_point_normal = normal + rg.Vector3d.ZAxis * 0.6\n        semi_circle = rg.Arc(\n            handle_start_point, start_point_normal, handle_end_point).ToNurbsCurve()\n\n        # Create a circle at the start of the semi-circle for the thickness\n        start_point_plane = rg.Plane(\n            semi_circle.PointAtStart, semi_circle.TangentAtStart)\n        shape_circle = rg.Circle(start_point_plane, thickness/2)\n\n        # Sweep the shape circle along the semi-circle to create the handle\n        closed = False\n        handle = rg.Brep.CreateFromSweep(\n            semi_circle, shape_circle.ToNurbsCurve(), closed, TOLERANCE)[0]\n        print(\"INFO: create_mug_handle - return\", handle)\n        return handle\n    except Exception as error:\n        print(\"ERROR: create_mug_handle \",\n              \"An error occurred:\", traceback.format_exc())\n        return DEFAULT_BREP\n\n\n# Parameters\nmug_height = 100\nmug_middle_radius = 50\nmug_origin = rg.Point3d(0, 0, 0)\nmug_normal = rg.Vector3d.ZAxis\n\nhandle_height = 60\nhandle_thickness = 10\nhandle_relative_height = 0.5\nhandle_relative_angle_at_start = 0.6\nhandle_alignment = rg.Vector3d(mug_normal.ZAxis)\nhandle_origin = rg.Point3d(\n    mug_middle_radius, 0, mug_height * handle_relative_height)\nhandle_normal = rg.Vector3d(mug_normal.XAxis)\n\n# Assembling\nmug_handle = create_mug_handle(handle_origin, handle_normal, handle_alignment,\n                               handle_height, handle_thickness, handle_relative_angle_at_start)\n\n# Return created object by placing it in variable a\na = mug_handle\n"}]}
